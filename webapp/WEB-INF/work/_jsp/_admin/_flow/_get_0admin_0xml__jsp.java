/*
 * JSP generated by Resin-3.1.12 (built Mon, 29 Aug 2011 03:22:08 PDT)
 */

package _jsp._admin._flow;
import javax.servlet.*;
import javax.servlet.jsp.*;
import javax.servlet.http.*;
import com.sogou.qadev.service.cynthia.service.ProjectInvolveManager;
import com.sogou.qadev.service.cynthia.service.ConfigManager;
import java.util.Set;
import java.util.HashSet;
import com.sogou.qadev.service.cynthia.bean.UserInfo;
import com.sogou.qadev.service.cynthia.util.XMLUtil;
import java.util.Map;
import java.util.LinkedHashMap;
import com.sogou.qadev.service.cynthia.util.ConfigUtil;
import com.sogou.qadev.service.cynthia.util.ArrayUtil;
import com.sogou.qadev.service.cynthia.service.DataAccessSession;
import com.sogou.qadev.service.cynthia.factory.DataAccessFactory;
import com.sogou.qadev.service.cynthia.bean.Flow;
import com.sogou.qadev.service.cynthia.bean.Stat;
import com.sogou.qadev.service.cynthia.bean.Key;
import java.util.TreeMap;

public class _get_0admin_0xml__jsp extends com.caucho.jsp.JavaPage
{
  private static final java.util.HashMap<String,java.lang.reflect.Method> _jsp_functionMap = new java.util.HashMap<String,java.lang.reflect.Method>();
  private boolean _caucho_isDead;
  
  public void
  _jspService(javax.servlet.http.HttpServletRequest request,
              javax.servlet.http.HttpServletResponse response)
    throws java.io.IOException, javax.servlet.ServletException
  {
    javax.servlet.http.HttpSession session = request.getSession(true);
    com.caucho.server.webapp.WebApp _jsp_application = _caucho_getApplication();
    javax.servlet.ServletContext application = _jsp_application;
    com.caucho.jsp.PageContextImpl pageContext = _jsp_application.getJspApplicationContext().allocatePageContext(this, _jsp_application, request, response, null, session, 8192, true, false);
    javax.servlet.jsp.PageContext _jsp_parentContext = pageContext;
    javax.servlet.jsp.JspWriter out = pageContext.getOut();
    final javax.el.ELContext _jsp_env = pageContext.getELContext();
    javax.servlet.ServletConfig config = getServletConfig();
    javax.servlet.Servlet page = this;
    response.setContentType("text/xml; charset=UTF-8");
    request.setCharacterEncoding("UTF-8");
    try {
      out.write(_jsp_string0, 0, _jsp_string0.length);
      
	response.setHeader("Cache-Control","no-cache"); //Forces caches to obtain a new copy of the page from the origin server
	response.setHeader("Cache-Control","no-store"); //Directs caches not to store the page under any circumstance
	response.setDateHeader("Expires", 0); //Causes the proxy cache to see the page as "stale"
	response.setHeader("Pragma","no-cache"); //HTTP 1.0 backward compatibility

	out.clear();

	Key key = (Key)session.getAttribute("key");
	Long keyId = (Long)session.getAttribute("kid");

	if(keyId == null || keyId <= 0 || key == null){
		response.sendRedirect(ConfigUtil.getCynthiaWebRoot());
		return;
	}

	DataAccessSession das = DataAccessFactory.getInstance().createDataAccessSession(key.getUsername(), keyId);
	
	boolean initFlow = false;
	if(request.getParameter("initFlow") != null)
		initFlow = Boolean.parseBoolean(request.getParameter("initFlow"));
	
	boolean initNode = false;
	if(request.getParameter("initNode") != null)
		initNode = Boolean.parseBoolean(request.getParameter("initNode"));
	
	boolean initStat = false;
	if(request.getParameter("initStat") != null)
		initStat = Boolean.parseBoolean(request.getParameter("initStat"));
	
	StringBuffer xmlb = new StringBuffer(64);
	xmlb.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
	xmlb.append("<root>");
	xmlb.append("<isError>false</isError>");
	
	UserInfo userInfo = das.queryUserInfoByUserName(key.getUsername());
	if(userInfo != null)
	{
		xmlb.append("<userRole>"+userInfo.getUserRole()+"</userRole>");
	}
	
	if(initFlow)
	{
		Flow[] flowArray = null;
		flowArray = das.queryAllFlows(key.getUsername());
		
		if(flowArray.length == 0)
			xmlb.append("<flows/>");
		else
		{
			xmlb.append("<flows>");
			
			for(Flow flow : flowArray)
			{
				xmlb.append("<flow>");
				xmlb.append("<id>").append(flow.getId()).append("</id>");
				xmlb.append("<name>").append(XMLUtil.toSafeXMLString(flow.getName())).append("</name>");
				xmlb.append("<isProFlow>").append(XMLUtil.toSafeXMLString(String.valueOf(flow.isProFlow()))).append("</isProFlow>");
				xmlb.append("</flow>");
			}
			
			xmlb.append("</flows>");
		}
		
		if(initStat)
		{
			for(Flow flow : flowArray)
			{
				TreeMap<String, Stat> statMap = new TreeMap<String, Stat>();
				
				Stat[] statArray = flow.getStats();
				if(statArray != null)
				{
					for(Stat stat : statArray)
					{
						if (null == stat.getName()){
							continue;
						}
						statMap.put(stat.getName(), stat);
					}
				}
				
				if(statMap.size() == 0)
					xmlb.append("<stats/>");
				else
				{
					xmlb.append("<stats>");
					
					for(Stat stat : statMap.values())
					{
						xmlb.append("<stat>");
						xmlb.append("<id>").append(stat.getId()).append("</id>");
						xmlb.append("<name>").append(XMLUtil.toSafeXMLString(stat.getName())).append("</name>");
						xmlb.append("<flowId>").append(flow.getId()).append("</flowId>");
						xmlb.append("</stat>");
					}
					
					xmlb.append("</stats>");
				}
			}
		}
	}
	
	xmlb.append("</root>");
		
	out.println(xmlb.toString());

    } catch (java.lang.Throwable _jsp_e) {
      pageContext.handlePageException(_jsp_e);
    } finally {
      _jsp_application.getJspApplicationContext().freePageContext(pageContext);
    }
  }

  private java.util.ArrayList _caucho_depends = new java.util.ArrayList();

  public java.util.ArrayList _caucho_getDependList()
  {
    return _caucho_depends;
  }

  public void _caucho_addDepend(com.caucho.vfs.PersistentDependency depend)
  {
    super._caucho_addDepend(depend);
    com.caucho.jsp.JavaPage.addDepend(_caucho_depends, depend);
  }

  public boolean _caucho_isModified()
  {
    if (_caucho_isDead)
      return true;
    if (com.caucho.server.util.CauchoSystem.getVersionId() != 7170261747151080670L)
      return true;
    for (int i = _caucho_depends.size() - 1; i >= 0; i--) {
      com.caucho.vfs.Dependency depend;
      depend = (com.caucho.vfs.Dependency) _caucho_depends.get(i);
      if (depend.isModified())
        return true;
    }
    return false;
  }

  public long _caucho_lastModified()
  {
    return 0;
  }

  public java.util.HashMap<String,java.lang.reflect.Method> _caucho_getFunctionMap()
  {
    return _jsp_functionMap;
  }

  public void init(ServletConfig config)
    throws ServletException
  {
    com.caucho.server.webapp.WebApp webApp
      = (com.caucho.server.webapp.WebApp) config.getServletContext();
    super.init(config);
    com.caucho.jsp.TaglibManager manager = webApp.getJspApplicationContext().getTaglibManager();
    com.caucho.jsp.PageContextImpl pageContext = new com.caucho.jsp.PageContextImpl(webApp, this);
  }

  public void destroy()
  {
      _caucho_isDead = true;
      super.destroy();
  }

  public void init(com.caucho.vfs.Path appDir)
    throws javax.servlet.ServletException
  {
    com.caucho.vfs.Path resinHome = com.caucho.server.util.CauchoSystem.getResinHome();
    com.caucho.vfs.MergePath mergePath = new com.caucho.vfs.MergePath();
    mergePath.addMergePath(appDir);
    mergePath.addMergePath(resinHome);
    com.caucho.loader.DynamicClassLoader loader;
    loader = (com.caucho.loader.DynamicClassLoader) getClass().getClassLoader();
    String resourcePath = loader.getResourcePathSpecificFirst();
    mergePath.addClassPath(resourcePath);
    com.caucho.vfs.Depend depend;
    depend = new com.caucho.vfs.Depend(appDir.lookup("admin/flow/get_Admin_xml.jsp"), -1354026054874993750L, false);
    com.caucho.jsp.JavaPage.addDepend(_caucho_depends, depend);
  }

  private final static char []_jsp_string0;
  static {
    _jsp_string0 = "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n".toCharArray();
  }
}
