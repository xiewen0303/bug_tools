/*
 * JSP generated by Resin-3.1.12 (built Mon, 29 Aug 2011 03:22:08 PDT)
 */

package _jsp._admin._template;
import javax.servlet.*;
import javax.servlet.jsp.*;
import javax.servlet.http.*;
import com.sogou.qadev.service.cynthia.dao.FieldNameMapMySQL;
import com.sogou.qadev.service.cynthia.service.ErrorManager.ErrorType;
import com.sogou.qadev.service.cynthia.service.ErrorManager;
import com.sogou.qadev.service.cynthia.bean.DataAccessAction;
import com.sogou.qadev.service.cynthia.bean.UUID;
import java.util.Date;
import java.sql.Timestamp;
import com.sogou.qadev.service.cynthia.bean.TemplateOperateLog;
import com.sogou.qadev.cache.impl.FieldNameCache;
import com.sogou.qadev.service.cynthia.bean.Key;
import com.sogou.qadev.service.cynthia.util.ConfigUtil;
import com.sogou.qadev.service.cynthia.util.ArrayUtil;
import com.sogou.qadev.service.cynthia.factory.DataAccessFactory;
import com.sogou.qadev.service.cynthia.bean.Template;
import com.sogou.qadev.service.cynthia.bean.Field;
import com.sogou.qadev.service.cynthia.bean.Field.Type;
import com.sogou.qadev.service.cynthia.bean.Field.DataType;
import com.sogou.qadev.service.cynthia.service.DataAccessSession;
import com.sogou.qadev.service.cynthia.service.DataAccessSession.ErrorCode;
import java.util.Set;
import java.util.LinkedHashSet;
import java.util.Arrays;

public class _add_0or_0update_0field_0xml__jsp extends com.caucho.jsp.JavaPage
{
  private static final java.util.HashMap<String,java.lang.reflect.Method> _jsp_functionMap = new java.util.HashMap<String,java.lang.reflect.Method>();
  private boolean _caucho_isDead;
  
  public void
  _jspService(javax.servlet.http.HttpServletRequest request,
              javax.servlet.http.HttpServletResponse response)
    throws java.io.IOException, javax.servlet.ServletException
  {
    javax.servlet.http.HttpSession session = request.getSession(true);
    com.caucho.server.webapp.WebApp _jsp_application = _caucho_getApplication();
    javax.servlet.ServletContext application = _jsp_application;
    com.caucho.jsp.PageContextImpl pageContext = _jsp_application.getJspApplicationContext().allocatePageContext(this, _jsp_application, request, response, null, session, 8192, true, false);
    javax.servlet.jsp.PageContext _jsp_parentContext = pageContext;
    javax.servlet.jsp.JspWriter out = pageContext.getOut();
    final javax.el.ELContext _jsp_env = pageContext.getELContext();
    javax.servlet.ServletConfig config = getServletConfig();
    javax.servlet.Servlet page = this;
    response.setContentType("text/xml; charset=UTF-8");
    request.setCharacterEncoding("UTF-8");
    try {
      out.write(_jsp_string0, 0, _jsp_string0.length);
      
	response.setHeader("Cache-Control","no-cache"); //Forces caches to obtain a new copy of the page from the origin server
	response.setHeader("Cache-Control","no-store"); //Directs caches not to store the page under any circumstance
	response.setDateHeader("Expires", 0); //Causes the proxy cache to see the page as "stale"
	response.setHeader("Pragma","no-cache"); //HTTP 1.0 backward compatibility

	out.clear();

	Key key = (Key)session.getAttribute("key");
	Long keyId = (Long)session.getAttribute("kid");

	if(keyId == null || keyId <= 0 || key == null){
		response.sendRedirect(ConfigUtil.getCynthiaWebRoot());
		return;
	}

	DataAccessSession das = DataAccessFactory.getInstance().createDataAccessSession(key.getUsername(), keyId);
	
	UUID templateId = DataAccessFactory.getInstance().createUUID(request.getParameter("templateId"));
	
	Template template = das.queryTemplate(templateId);
	
	if(template == null)
	{
		out.println(ErrorManager.getErrorXml(ErrorType.template_not_found));
		return;
	}
	
	//\u5907\u4efdtemplate
// 	template = (Template)template.clone();
	String flag = request.getParameter("flag");
	if("remove".equals(flag))
	{
		UUID fieldId = DataAccessFactory.getInstance().createUUID(request.getParameter("fieldId"));
		Field field = template.getField(fieldId);
		Field beforeField = field.clone();
		template.removeField(fieldId , templateId);
		ErrorCode errorCode = das.updateTemplate(template);
		if(errorCode.equals(ErrorCode.success)){
			String fieldColName = FieldNameCache.getInstance().getFieldName(fieldId , templateId);
			FieldNameCache.getInstance().remove(fieldId.getValue(),templateId.getValue());
			das.updateCache(DataAccessAction.update, template.getId().getValue(), template);
			//\u8bb0\u5f55\u4fee\u6539\u65e5\u5fd7
			TemplateOperateLog tol = new TemplateOperateLog();
			tol.setTemplateId(templateId.getValue());
			tol.setFieldId(beforeField.getId().getValue());
			tol.setFieldName(beforeField.getName());
			tol.setOperateType(TemplateOperateLog.DELETE);
			tol.setCreateTime(new Timestamp(System.currentTimeMillis()));
			tol.setCreateUser(key.getUsername());
			tol.setBefore(beforeField.toXMLString());
			tol.setAfter("");
			das.addTemplateOpreateLog(tol);
			out.println(ErrorManager.getCorrectXml());
		}
		else{
			out.println(ErrorManager.getErrorXml(ErrorType.database_update_error));
		}
		return;
	}
	
	if("move".equals(flag))
	{
		int rowIndex = Integer.parseInt(request.getParameter("rowIndex"));
		int columnIndex = Integer.parseInt(request.getParameter("columnIndex"));
		int positionIndex = Integer.parseInt(request.getParameter("positionIndex"));
		UUID fieldId = DataAccessFactory.getInstance().createUUID(request.getParameter("fieldId"));
		Field field = template.getField(fieldId);
		template.moveField(field, rowIndex, columnIndex, positionIndex);
		ErrorCode errorCode = das.updateTemplate(template);
		if(errorCode.equals(ErrorCode.success)){
			das.updateCache(DataAccessAction.update, template.getId().getValue(), template);
			out.println(ErrorManager.getCorrectXml());
		}
		else{
			out.println(ErrorManager.getErrorXml(ErrorType.database_update_error));
		}
		return;
	}
	
	Type type = Type.valueOf(request.getParameter("fieldType"));
	DataType dataType = null;
	if(!type.equals(Type.t_attachment))
	{
		dataType = DataType.valueOf(request.getParameter("fieldDataType"));
	}
	
	String fieldName = request.getParameter("name");
	if("add".equals(flag))
	{
		//\u589e\u52a0\u4e00\u4e2a\u5b57\u6bb5
		Field field = template.addField(type, dataType);
		if(field == null)
		{
			out.println(ErrorManager.getErrorXml(ErrorType.field_update_error));
			return;
		}
		int rowIndex = Integer.parseInt(request.getParameter("rowIndex"));
		int columnIndex = Integer.parseInt(request.getParameter("columnIndex"));
		int positionIndex = Integer.parseInt(request.getParameter("positionIndex"));
		template.addField(field, rowIndex, columnIndex, positionIndex);
		
		field.setName(request.getParameter("fieldName"));
		field.setDescription(request.getParameter("fieldDescription"));
		field.setFieldTip(request.getParameter("fieldTip"));
		field.setTimestampFormat(request.getParameter("timestampFormat"));
		field.setDateCurTime(Boolean.parseBoolean(request.getParameter("dateCurTime")));
		field.setFieldSize(request.getParameter("fieldSize"));
		field.setDefaultValue(request.getParameter("defaultValue"));
		String controlFieldIdStr = request.getParameter("controlFieldId");
		
		if(controlFieldIdStr != null)
			field.setControlFieldId(DataAccessFactory.getInstance().createUUID(controlFieldIdStr));
		
		
		//control option ids
		Set<UUID> controlOptionIdSet = new LinkedHashSet<UUID>();
		
		String[] controlOptionIdStrArray = (String[])ArrayUtil.format(request.getParameterValues("controlOptionId"), new String[0]);
		for(String controlOptionIdStr : controlOptionIdStrArray)
			controlOptionIdSet.add(DataAccessFactory.getInstance().createUUID(controlOptionIdStr));
	
		field.setControlOptionIds(controlOptionIdSet);
		
		//control role ids
		String[] controlRoleIdArray = (String[])ArrayUtil.format(request.getParameterValues("controlRoleId"), new String[0]);
		field.setControlRoleIds(new LinkedHashSet<String>(Arrays.asList(controlRoleIdArray)));
		
		//control action ids
		String[] controlActionIdArray = (String[])ArrayUtil.format(request.getParameterValues("controlActionId"), new String[0]);
		field.setControlActionIds(new LinkedHashSet<String>(Arrays.asList(controlActionIdArray)));
		
		//action ids
		Set<UUID> actionIdSet = new LinkedHashSet<UUID>();
		
		String[] actionIdStrArray = (String[])ArrayUtil.format(request.getParameterValues("actionId"), new String[0]);
		for(String actionIdStr : actionIdStrArray)
			actionIdSet.add(DataAccessFactory.getInstance().createUUID(actionIdStr));
		
		field.setActionIds(actionIdSet);
		
		//\u5148\u6dfb\u52a0\u5b57\u6bb5\uff0c\u518d\u66f4\u65b0\u8868\u5355
		String fieldColName = FieldNameMapMySQL.getInstance().getOneFieldName(field, template.getId().getValue());
		if(fieldColName == null || fieldColName.length() == 0 ){
			out.println(ErrorManager.getErrorXml(ErrorType.field_update_error));
			return;			
		}
		else{
			if(das.addFieldColName(template.getId().getValue(), fieldColName, field.getId().getValue(),  FieldNameMapMySQL.getInstance().getFieldColNameType(field))){
				FieldNameCache.getInstance().set(field.getId().getValue(), fieldColName);
				ErrorCode errorCode = das.updateTemplate(template);
				if(errorCode.equals(ErrorCode.success)){
			das.updateCache(DataAccessAction.update, template.getId().getValue(),template);
			
			//\u8bb0\u5f55\u4fee\u6539\u65e5\u5fd7
			TemplateOperateLog tol = new TemplateOperateLog();
			tol.setTemplateId(templateId.getValue());
			tol.setFieldId(field.getId().getValue());
			tol.setFieldName(field.getName());
			tol.setOperateType(TemplateOperateLog.ADD);
			tol.setCreateTime(new Timestamp(System.currentTimeMillis()));
			tol.setCreateUser(key.getUsername());
			tol.setBefore("");
			tol.setAfter(field.toXMLString());
			das.addTemplateOpreateLog(tol);
				}else{
			out.println(ErrorManager.getErrorXml(ErrorType.field_update_error));
			return;	
				}
			}else{
				out.println(ErrorManager.getErrorXml(ErrorType.database_update_error));
				return;
			}
			if(das.addFieldColName(template.getId().getValue(), fieldColName, field.getId().getValue(),  FieldNameMapMySQL.getInstance().getFieldColNameType(field))){
				FieldNameCache.getInstance().set(field.getId().getValue(), fieldColName);
				ErrorCode errorCode = das.updateTemplate(template);
				if(errorCode.equals(ErrorCode.success)){
			das.updateCache(DataAccessAction.update, template.getId().getValue(),template);
			
			//\u8bb0\u5f55\u4fee\u6539\u65e5\u5fd7
			TemplateOperateLog tol = new TemplateOperateLog();
			tol.setTemplateId(templateId.getValue());
			tol.setFieldId(field.getId().getValue());
			tol.setFieldName(field.getName());
			tol.setOperateType(TemplateOperateLog.ADD);
			tol.setCreateTime(new Timestamp(System.currentTimeMillis()));
			tol.setCreateUser(key.getUsername());
			tol.setBefore("");
			tol.setAfter(field.toXMLString());
			das.addTemplateOpreateLog(tol);
			out.println(ErrorManager.getCorrectXml());
				}else{
			out.println(ErrorManager.getErrorXml(ErrorType.field_update_error));
			return;	
				}
			}else{
				out.println(ErrorManager.getErrorXml(ErrorType.database_update_error));
				return;
			}
		}
	}else if("update".equals(flag))
	{
		//\u4fee\u6539\u4e00\u4e2a\u5b57\u6bb5
		UUID fieldId = DataAccessFactory.getInstance().createUUID(request.getParameter("fieldId"));
		Field field = template.getField(fieldId);
		String fieldXmlBefore = field.toXMLString();
		if(field == null)
		{
			out.println(ErrorManager.getErrorXml(ErrorType.field_update_error));
			return;
		}
		field.setName(request.getParameter("fieldName"));
		field.setTimestampFormat(request.getParameter("timestampFormat"));
		field.setDescription(request.getParameter("fieldDescription"));
		field.setFieldTip(request.getParameter("fieldTip"));
		field.setFieldSize(request.getParameter("fieldSize"));
		field.setDateCurTime(Boolean.parseBoolean(request.getParameter("dateCurTime")));
		
		field.setDefaultValue(request.getParameter("defaultValue"));
		String controlFieldIdStr = request.getParameter("controlFieldId");
		if(controlFieldIdStr != null)
			field.setControlFieldId(DataAccessFactory.getInstance().createUUID(controlFieldIdStr));
		
		//control option ids
		Set<UUID> controlOptionIdSet = new LinkedHashSet<UUID>();
		
		String[] controlOptionIdStrArray = (String[])ArrayUtil.format(request.getParameterValues("controlOptionId"), new String[0]);
		for(String controlOptionIdStr : controlOptionIdStrArray)
			controlOptionIdSet.add(DataAccessFactory.getInstance().createUUID(controlOptionIdStr));
	
		field.setControlOptionIds(controlOptionIdSet);
		
		//control role ids
		String[] controlRoleIdArray = (String[])ArrayUtil.format(request.getParameterValues("controlRoleId"), new String[0]);
		field.setControlRoleIds(new LinkedHashSet<String>(Arrays.asList(controlRoleIdArray)));
		
		//control action ids
		String[] controlActionIdArray = (String[])ArrayUtil.format(request.getParameterValues("controlActionId"), new String[0]);
		field.setControlActionIds(new LinkedHashSet<String>(Arrays.asList(controlActionIdArray)));
		
		//action ids
		Set<UUID> actionIdSet = new LinkedHashSet<UUID>();
		
		String[] actionIdStrArray = (String[])ArrayUtil.format(request.getParameterValues("actionId"), new String[0]);
		for(String actionIdStr : actionIdStrArray)
			actionIdSet.add(DataAccessFactory.getInstance().createUUID(actionIdStr));
		
		field.setActionIds(actionIdSet);
		ErrorCode errorCode = das.updateTemplate(template);
		if(errorCode.equals(ErrorCode.success)){
			das.updateCache(DataAccessAction.update, template.getId().getValue(),template);
			//\u8bb0\u5f55\u4fee\u6539\u65e5\u5fd7
			TemplateOperateLog tol = new TemplateOperateLog();
			tol.setTemplateId(templateId.getValue());
			tol.setFieldId(field.getId().getValue());
			tol.setFieldName(field.getName());
			tol.setOperateType(TemplateOperateLog.MODIFY);
			tol.setCreateTime(new Timestamp(System.currentTimeMillis()));
			tol.setCreateUser(key.getUsername());
			tol.setBefore(fieldXmlBefore);
			tol.setAfter(field.toXMLString());
			das.addTemplateOpreateLog(tol);
			out.println(ErrorManager.getCorrectXml());
		}else{
			out.println(ErrorManager.getErrorXml(ErrorType.database_update_error));
		}
	}

    } catch (java.lang.Throwable _jsp_e) {
      pageContext.handlePageException(_jsp_e);
    } finally {
      _jsp_application.getJspApplicationContext().freePageContext(pageContext);
    }
  }

  private java.util.ArrayList _caucho_depends = new java.util.ArrayList();

  public java.util.ArrayList _caucho_getDependList()
  {
    return _caucho_depends;
  }

  public void _caucho_addDepend(com.caucho.vfs.PersistentDependency depend)
  {
    super._caucho_addDepend(depend);
    com.caucho.jsp.JavaPage.addDepend(_caucho_depends, depend);
  }

  public boolean _caucho_isModified()
  {
    if (_caucho_isDead)
      return true;
    if (com.caucho.server.util.CauchoSystem.getVersionId() != 7170261747151080670L)
      return true;
    for (int i = _caucho_depends.size() - 1; i >= 0; i--) {
      com.caucho.vfs.Dependency depend;
      depend = (com.caucho.vfs.Dependency) _caucho_depends.get(i);
      if (depend.isModified())
        return true;
    }
    return false;
  }

  public long _caucho_lastModified()
  {
    return 0;
  }

  public java.util.HashMap<String,java.lang.reflect.Method> _caucho_getFunctionMap()
  {
    return _jsp_functionMap;
  }

  public void init(ServletConfig config)
    throws ServletException
  {
    com.caucho.server.webapp.WebApp webApp
      = (com.caucho.server.webapp.WebApp) config.getServletContext();
    super.init(config);
    com.caucho.jsp.TaglibManager manager = webApp.getJspApplicationContext().getTaglibManager();
    com.caucho.jsp.PageContextImpl pageContext = new com.caucho.jsp.PageContextImpl(webApp, this);
  }

  public void destroy()
  {
      _caucho_isDead = true;
      super.destroy();
  }

  public void init(com.caucho.vfs.Path appDir)
    throws javax.servlet.ServletException
  {
    com.caucho.vfs.Path resinHome = com.caucho.server.util.CauchoSystem.getResinHome();
    com.caucho.vfs.MergePath mergePath = new com.caucho.vfs.MergePath();
    mergePath.addMergePath(appDir);
    mergePath.addMergePath(resinHome);
    com.caucho.loader.DynamicClassLoader loader;
    loader = (com.caucho.loader.DynamicClassLoader) getClass().getClassLoader();
    String resourcePath = loader.getResourcePathSpecificFirst();
    mergePath.addClassPath(resourcePath);
    com.caucho.vfs.Depend depend;
    depend = new com.caucho.vfs.Depend(appDir.lookup("admin/template/add_Or_Update_Field_xml.jsp"), -4007422830492171243L, false);
    com.caucho.jsp.JavaPage.addDepend(_caucho_depends, depend);
  }

  private final static char []_jsp_string0;
  static {
    _jsp_string0 = "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n".toCharArray();
  }
}
