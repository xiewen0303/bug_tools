/*
 * JSP generated by Resin-3.1.12 (built Mon, 29 Aug 2011 03:22:08 PDT)
 */

package _jsp._admin._template;
import javax.servlet.*;
import javax.servlet.jsp.*;
import javax.servlet.http.*;
import com.sogou.qadev.service.cynthia.util.CynthiaUtil;
import com.sogou.qadev.service.cynthia.service.ErrorManager;
import com.sogou.qadev.service.cynthia.service.ErrorManager.ErrorType;
import java.util.Date;
import java.util.*;
import java.sql.Timestamp;
import com.sogou.qadev.service.cynthia.bean.TemplateOperateLog;
import com.sogou.qadev.service.cynthia.bean.DataAccessAction;
import com.sogou.qadev.service.cynthia.util.ConfigUtil;
import com.sogou.qadev.service.cynthia.util.EscapeUtil;
import com.sogou.qadev.service.cynthia.factory.DataAccessFactory;
import com.sogou.qadev.service.cynthia.service.DataAccessSession;
import com.sogou.qadev.service.cynthia.service.DataAccessSession.ErrorCode;
import com.sogou.qadev.service.cynthia.bean.Template;
import com.sogou.qadev.service.cynthia.bean.Field;
import com.sogou.qadev.service.cynthia.bean.Option;
import com.sogou.qadev.service.cynthia.bean.Option.Forbidden;
import com.sogou.qadev.service.cynthia.bean.UUID;
import com.sogou.qadev.service.cynthia.bean.Key;
import com.sogou.qadev.service.cynthia.util.XMLUtil;
import org.w3c.dom.*;
import javax.xml.parsers.*;

public class _add_0or_0update_0option_0xml__jsp extends com.caucho.jsp.JavaPage
{
  private static final java.util.HashMap<String,java.lang.reflect.Method> _jsp_functionMap = new java.util.HashMap<String,java.lang.reflect.Method>();
  private boolean _caucho_isDead;
  
  public void
  _jspService(javax.servlet.http.HttpServletRequest request,
              javax.servlet.http.HttpServletResponse response)
    throws java.io.IOException, javax.servlet.ServletException
  {
    javax.servlet.http.HttpSession session = request.getSession(true);
    com.caucho.server.webapp.WebApp _jsp_application = _caucho_getApplication();
    javax.servlet.ServletContext application = _jsp_application;
    com.caucho.jsp.PageContextImpl pageContext = _jsp_application.getJspApplicationContext().allocatePageContext(this, _jsp_application, request, response, null, session, 8192, true, false);
    javax.servlet.jsp.PageContext _jsp_parentContext = pageContext;
    javax.servlet.jsp.JspWriter out = pageContext.getOut();
    final javax.el.ELContext _jsp_env = pageContext.getELContext();
    javax.servlet.ServletConfig config = getServletConfig();
    javax.servlet.Servlet page = this;
    response.setContentType("text/xml; charset=UTF-8");
    request.setCharacterEncoding("UTF-8");
    try {
      out.write(_jsp_string0, 0, _jsp_string0.length);
      
	response.setHeader("Cache-Control","no-cache"); //Forces caches to obtain a new copy of the page from the origin server
	response.setHeader("Cache-Control","no-store"); //Directs caches not to store the page under any circumstance
	response.setDateHeader("Expires", 0); //Causes the proxy cache to see the page as "stale"
	response.setHeader("Pragma","no-cache"); //HTTP 1.0 backward compatibility

	out.clear();

	Key key = (Key)session.getAttribute("key");
	Long keyId = (Long)session.getAttribute("kid");

	if(keyId == null || keyId <= 0 || key == null){
		response.sendRedirect(ConfigUtil.getCynthiaWebRoot());
		return;
	}
	
	String xmlHeader = "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>";
	DataAccessSession das = DataAccessFactory.getInstance().createDataAccessSession(key.getUsername(), keyId);
	String requestXml = request.getParameter("xml");
	if(requestXml==null)
	{
		out.println(ErrorManager.getErrorXml(ErrorType.param_error));
		return;
	}
	
	requestXml = xmlHeader + requestXml;
	
	Document doc = XMLUtil.string2Document(requestXml, "UTF-8");
	Node rootNode = XMLUtil.getSingleNode(doc, "root");
	Node templateIdNode = XMLUtil.getSingleNode(rootNode, "templateId");
	Node fieldIdNode    = XMLUtil.getSingleNode(rootNode, "fieldId");
	Node controlFieldOptionIdNode = XMLUtil.getSingleNode(rootNode, "controlFieldOptionId");
	String controlFieldOptionIdStr = controlFieldOptionIdNode.getTextContent();
	
	List<Node> optionNodes = XMLUtil.getNodes(rootNode, "options/option");
	
	
	UUID templateId = DataAccessFactory.getInstance().createUUID(templateIdNode.getTextContent());
	
	Template template = das.queryTemplate(templateId);
	if(template == null)
	{
		out.println(ErrorManager.getErrorXml(ErrorType.template_not_found));
		return;
	}
	
	//\u5907\u4efdtemplate
// 	template = (Template)template.clone();
	
	UUID fieldId = DataAccessFactory.getInstance().createUUID(fieldIdNode.getTextContent());
	
	Field field = template.getField(fieldId);
	
	String fieldXmlBefore = field.toXMLString();
	
	if(field == null)
	{
		out.println(ErrorManager.getErrorXml(ErrorType.field_update_error));
		return;
	}
	
	Set<Option> oriOptions = field.getOptions();
	List<String> newOptionIds = new ArrayList<String>();
	
	for(Node optionNode : optionNodes)
	{
		String optionNodeId = XMLUtil.getSingleNodeTextContent(optionNode, "optionId");
		if(optionNodeId!=null&&!"".equals(optionNodeId))
		{
	newOptionIds.add(optionNodeId);
		}
	}
	
	
	//\u5148\u5220\u9664\u6570\u636e \u628a\u4e0d\u5728\u65b0\u7684id\u5217\u8868\u91cc\u9762\u7684\u5220\u9664\u6389
	List<Option> removedOriOptions = new ArrayList<Option>();
	for(Option oriOption : oriOptions)
	{
		if(controlFieldOptionIdStr!=null&&!"".equals(controlFieldOptionIdStr))
		{
	if(oriOption.getControlOptionId().getValue().equals(controlFieldOptionIdStr))
	{
		if(!newOptionIds.contains(oriOption.getId().toString()))
		{
	removedOriOptions.add(oriOption);
		}
	}
	
		}else
		{
	if(!newOptionIds.contains(oriOption.getId().toString()))
	{
		removedOriOptions.add(oriOption);
	}
		}
		
	}
	
	for(Option removedOption : removedOriOptions)
	{
		field.removeOption(removedOption.getId());
	}
	
	//\u5220\u9664\u5b8c\u6bd5,\u91cd\u65b0\u8bbe\u7f6eindexOrder\u548c\u65b0\u589e\u9009\u9879
	for(Node optionNode : optionNodes)
	{
		String optionIdStr 		  = XMLUtil.getSingleNodeTextContent(optionNode, "optionId");
		String optionNameStr  	  = XMLUtil.getSingleNodeTextContent(optionNode, "optionName");
		String optionForbiddenStr = XMLUtil.getSingleNodeTextContent(optionNode, "optionForbidden");
		String optionIndexOrder   = XMLUtil.getSingleNodeTextContent(optionNode, "optionIndexOrder");
		
		if(optionIdStr == null || "".equals(optionIdStr)) //\u65b0\u589e\u4e00\u4e2aoption
		{
	Option option = field.addOption();
	if(option == null)
	{
		out.println(ErrorManager.getErrorXml(ErrorType.field_update_error));
		return;
	}
	option.setName(EscapeUtil.decodeAll(optionNameStr));
	option.setForbidden(Forbidden.valueOf(optionForbiddenStr));
	option.setIndexOrder(Integer.parseInt(optionIndexOrder));
	if(controlFieldOptionIdStr != null&&!"".equals(controlFieldOptionIdStr))
	{
		option.setControlOptionId(DataAccessFactory.getInstance().createUUID(controlFieldOptionIdStr));
	}
		}else
		{
	UUID optionId = DataAccessFactory.getInstance().createUUID(optionIdStr);
	for(Option oriOption : oriOptions)
	{
		if(oriOption.getId().equals(optionId))
		{
	oriOption.setName(EscapeUtil.decodeAll(optionNameStr));
	oriOption.setForbidden(Forbidden.valueOf(optionForbiddenStr));
	oriOption.setIndexOrder(Integer.parseInt(optionIndexOrder));
		}
	}
		}
	}
	
	ErrorCode errorCode = das.updateTemplate(template);
	
	if(errorCode.equals(ErrorCode.success)){
		das.updateCache(DataAccessAction.update, template.getId().getValue(),template);
		
		//\u8bb0\u5f55\u4fee\u6539\u65e5\u5fd7
		TemplateOperateLog tol = new TemplateOperateLog();
		tol.setTemplateId(templateId.getValue());
		tol.setFieldId(field.getId().getValue());
		tol.setFieldName(field.getName());
		tol.setOperateType(TemplateOperateLog.MODIFY);
		tol.setCreateTime(Timestamp.valueOf(CynthiaUtil.toLocalDateString(null)));
		tol.setCreateUser(key.getUsername());
		tol.setBefore(fieldXmlBefore);
		tol.setAfter(field.toXMLString());
		das.addTemplateOpreateLog(tol);
		
		out.println(ErrorManager.getCorrectXml());
	}else{
		out.println(ErrorManager.getErrorXml(ErrorType.database_update_error));
	}

    } catch (java.lang.Throwable _jsp_e) {
      pageContext.handlePageException(_jsp_e);
    } finally {
      _jsp_application.getJspApplicationContext().freePageContext(pageContext);
    }
  }

  private java.util.ArrayList _caucho_depends = new java.util.ArrayList();

  public java.util.ArrayList _caucho_getDependList()
  {
    return _caucho_depends;
  }

  public void _caucho_addDepend(com.caucho.vfs.PersistentDependency depend)
  {
    super._caucho_addDepend(depend);
    com.caucho.jsp.JavaPage.addDepend(_caucho_depends, depend);
  }

  public boolean _caucho_isModified()
  {
    if (_caucho_isDead)
      return true;
    if (com.caucho.server.util.CauchoSystem.getVersionId() != 7170261747151080670L)
      return true;
    for (int i = _caucho_depends.size() - 1; i >= 0; i--) {
      com.caucho.vfs.Dependency depend;
      depend = (com.caucho.vfs.Dependency) _caucho_depends.get(i);
      if (depend.isModified())
        return true;
    }
    return false;
  }

  public long _caucho_lastModified()
  {
    return 0;
  }

  public java.util.HashMap<String,java.lang.reflect.Method> _caucho_getFunctionMap()
  {
    return _jsp_functionMap;
  }

  public void init(ServletConfig config)
    throws ServletException
  {
    com.caucho.server.webapp.WebApp webApp
      = (com.caucho.server.webapp.WebApp) config.getServletContext();
    super.init(config);
    com.caucho.jsp.TaglibManager manager = webApp.getJspApplicationContext().getTaglibManager();
    com.caucho.jsp.PageContextImpl pageContext = new com.caucho.jsp.PageContextImpl(webApp, this);
  }

  public void destroy()
  {
      _caucho_isDead = true;
      super.destroy();
  }

  public void init(com.caucho.vfs.Path appDir)
    throws javax.servlet.ServletException
  {
    com.caucho.vfs.Path resinHome = com.caucho.server.util.CauchoSystem.getResinHome();
    com.caucho.vfs.MergePath mergePath = new com.caucho.vfs.MergePath();
    mergePath.addMergePath(appDir);
    mergePath.addMergePath(resinHome);
    com.caucho.loader.DynamicClassLoader loader;
    loader = (com.caucho.loader.DynamicClassLoader) getClass().getClassLoader();
    String resourcePath = loader.getResourcePathSpecificFirst();
    mergePath.addClassPath(resourcePath);
    com.caucho.vfs.Depend depend;
    depend = new com.caucho.vfs.Depend(appDir.lookup("admin/template/add_Or_Update_Option_xml.jsp"), -5633159102324985552L, false);
    com.caucho.jsp.JavaPage.addDepend(_caucho_depends, depend);
  }

  private final static char []_jsp_string0;
  static {
    _jsp_string0 = "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n".toCharArray();
  }
}
