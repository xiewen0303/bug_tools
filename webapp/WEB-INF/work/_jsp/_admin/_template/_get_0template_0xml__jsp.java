/*
 * JSP generated by Resin-3.1.12 (built Mon, 29 Aug 2011 03:22:08 PDT)
 */

package _jsp._admin._template;
import javax.servlet.*;
import javax.servlet.jsp.*;
import javax.servlet.http.*;
import com.sogou.qadev.service.cynthia.service.ErrorManager.ErrorType;
import com.sogou.qadev.service.cynthia.service.ErrorManager;
import java.util.Map;
import com.sogou.qadev.service.cynthia.bean.Stat;
import com.sogou.qadev.service.cynthia.util.ConfigUtil;
import com.sogou.qadev.service.cynthia.util.XMLUtil;
import com.sogou.qadev.service.cynthia.bean.Key;
import com.sogou.qadev.service.cynthia.bean.UUID;
import com.sogou.qadev.service.cynthia.factory.DataAccessFactory;
import com.sogou.qadev.service.cynthia.service.DataAccessSession;
import com.sogou.qadev.service.cynthia.bean.Template;
import com.sogou.qadev.service.cynthia.bean.Flow;
import com.sogou.qadev.service.cynthia.bean.Action;
import com.sogou.qadev.service.cynthia.bean.Role;
import com.sogou.qadev.service.cynthia.bean.Filter;
import org.w3c.dom.*;

public class _get_0template_0xml__jsp extends com.caucho.jsp.JavaPage
{
  private static final java.util.HashMap<String,java.lang.reflect.Method> _jsp_functionMap = new java.util.HashMap<String,java.lang.reflect.Method>();
  private boolean _caucho_isDead;
  
  public void
  _jspService(javax.servlet.http.HttpServletRequest request,
              javax.servlet.http.HttpServletResponse response)
    throws java.io.IOException, javax.servlet.ServletException
  {
    javax.servlet.http.HttpSession session = request.getSession(true);
    com.caucho.server.webapp.WebApp _jsp_application = _caucho_getApplication();
    javax.servlet.ServletContext application = _jsp_application;
    com.caucho.jsp.PageContextImpl pageContext = _jsp_application.getJspApplicationContext().allocatePageContext(this, _jsp_application, request, response, null, session, 8192, true, false);
    javax.servlet.jsp.PageContext _jsp_parentContext = pageContext;
    javax.servlet.jsp.JspWriter out = pageContext.getOut();
    final javax.el.ELContext _jsp_env = pageContext.getELContext();
    javax.servlet.ServletConfig config = getServletConfig();
    javax.servlet.Servlet page = this;
    response.setContentType("text/xml; charset=UTF-8");
    request.setCharacterEncoding("UTF-8");
    try {
      out.write(_jsp_string0, 0, _jsp_string0.length);
      
	response.setHeader("Cache-Control","no-cache"); //Forces caches to obtain a new copy of the page from the origin server
	response.setHeader("Cache-Control","no-store"); //Directs caches not to store the page under any circumstance
	response.setDateHeader("Expires", 0); //Causes the proxy cache to see the page as "stale"
	response.setHeader("Pragma","no-cache"); //HTTP 1.0 backward compatibility
	
	out.clear();

	Key key = (Key)session.getAttribute("key");
	Long keyId = (Long)session.getAttribute("kid");

	if(keyId == null || keyId <= 0 || key == null){
		response.sendRedirect(ConfigUtil.getCynthiaWebRoot());
		return;
	}

	DataAccessSession das = DataAccessFactory.getInstance().createDataAccessSession(key.getUsername(), keyId);
	
	String idStr = request.getParameter("id");
	if(idStr == null)
	{
		out.println(ErrorManager.getErrorXml(ErrorType.param_error));
		return;
	}
	
	UUID id = DataAccessFactory.getInstance().createUUID(idStr);

	Template template = das.queryTemplate(id);
	if(template == null)
	{
		out.println(ErrorManager.getErrorXml(ErrorType.template_not_found));
		return;
	}
	
	Document doc = XMLUtil.string2Document(template.toXMLString(), "UTF-8");
	
	Node templateNode = XMLUtil.getSingleNode(doc, "template");
	doc.removeChild(templateNode);
	
	Node rootNode = doc.createElement("root");
	doc.appendChild(rootNode);
	
	Node isErrorNode = doc.createElement("isError");
	rootNode.appendChild(isErrorNode);
	isErrorNode.setTextContent("false");
	
	rootNode.appendChild(templateNode);
	
	
	Flow flow = das.queryFlow(template.getFlowId());
	
	if(flow == null)
	{
		out.println(ErrorManager.getErrorXml(ErrorType.flow_not_found));
		return;
	}
	
	Node actionsNode = doc.createElement("actions");
	rootNode.appendChild(actionsNode);
	
	Action[] actionArray = flow.getActions();

	if(actionArray != null)
	{
		for(Action action : actionArray)
		{
			Node actionNode = doc.createElement("action");
			actionsNode.appendChild(actionNode);
			
			Node actionIdNode = doc.createElement("id");
			actionNode.appendChild(actionIdNode);
			actionIdNode.setTextContent(action.getId().toString());
			
			Node actionNameNode = doc.createElement("name");
			actionNode.appendChild(actionNameNode);
			actionNameNode.setTextContent(action.getName());
			
			Node rolesNode = doc.createElement("roles");
			actionNode.appendChild(rolesNode);
			
			if(flow.isActionEveryoneRole(action.getId()))
			{
				Node everyoneRoleNode = doc.createElement("role");
				rolesNode.appendChild(everyoneRoleNode);
				
				Node everyoneRoleIdNode = doc.createElement("id");
				everyoneRoleNode.appendChild(everyoneRoleIdNode);
				everyoneRoleIdNode.setTextContent(Role.everyoneUUID.toString());
				
				Node everyoneRoleNameNode = doc.createElement("name");
				everyoneRoleNode.appendChild(everyoneRoleNameNode);
				everyoneRoleNameNode.setTextContent(Role.everyoneName);
			}
			
			Role[] roleArray = flow.queryActionRoles(action.getId());
			
			if(roleArray != null)
			{
				for(Role role : roleArray)
				{
					Node roleNode = doc.createElement("role");
					rolesNode.appendChild(roleNode);
					
					Node roleIdNode = doc.createElement("id");
					roleNode.appendChild(roleIdNode);
					roleIdNode.setTextContent(role.getId().toString());
					
					Node roleNameNode = doc.createElement("name");
					roleNode.appendChild(roleNameNode);
					roleNameNode.setTextContent(role.getName());
				}
			}
		}
	}
	
	Stat[] statArray = flow.getStats();
	Node statsNode = doc.createElement("stats");
	rootNode.appendChild(statsNode);
	if(statArray != null)
	{
		for(Stat stat : statArray)
		{
			Node statNode = doc.createElement("stat");
			statsNode.appendChild(statNode);
			
			Node statIdNode = doc.createElement("id");
			statNode.appendChild(statIdNode);
			statIdNode.setTextContent(stat.getId().toString());
			
			Node statNameNode = doc.createElement("name");
			statNode.appendChild(statNameNode);
			statNameNode.setTextContent(stat.getName());
		}
	}
	
	
	Node rolesNode = doc.createElement("roles");
	rootNode.appendChild(rolesNode);
	
	if(flow.isActionEveryoneRole(Action.editUUID))
	{
		Node everyoneRoleNode = doc.createElement("role");
		rolesNode.appendChild(everyoneRoleNode);
		
		Node everyoneRoleIdNode = doc.createElement("id");
		everyoneRoleNode.appendChild(everyoneRoleIdNode);
		everyoneRoleIdNode.setTextContent(Role.everyoneUUID.toString());
		
		Node everyoneRoleNameNode = doc.createElement("name");
		everyoneRoleNode.appendChild(everyoneRoleNameNode);
		everyoneRoleNameNode.setTextContent(Role.everyoneName);
	}
	
	Role[] roleArray = flow.queryEditActionRoles();
	if(roleArray != null)
	{
		for(Role role : roleArray)
		{
			Node roleNode = doc.createElement("role");
			rolesNode.appendChild(roleNode);
			
			Node roleIdNode = doc.createElement("id");
			roleNode.appendChild(roleIdNode);
			roleIdNode.setTextContent(role.getId().toString());
			
			Node roleNameNode = doc.createElement("name");
			roleNode.appendChild(roleNameNode);
			roleNameNode.setTextContent(role.getName());
		}
	}
	
	Node filtersNode = doc.createElement("filters");
	rootNode.appendChild(filtersNode);
	
	Map<String,String> idNameMap = das.queryFilterIdNameMap(key.getUsername());
	
	if(idNameMap.size() > 0)
	{
		for(String filterId : idNameMap.keySet())
		{
			Node filterNode = doc.createElement("filter");
			filtersNode.appendChild(filterNode);
			
			Node filterIdNode = doc.createElement("id");
			filterNode.appendChild(filterIdNode);
			filterIdNode.setTextContent(filterId);
			
			Node filterNameNode = doc.createElement("name");
			filterNode.appendChild(filterNameNode);
			filterNameNode.setTextContent(idNameMap.get(filterId));
		}
	}
	
	out.println(XMLUtil.document2String(doc, "UTF-8"));

    } catch (java.lang.Throwable _jsp_e) {
      pageContext.handlePageException(_jsp_e);
    } finally {
      _jsp_application.getJspApplicationContext().freePageContext(pageContext);
    }
  }

  private java.util.ArrayList _caucho_depends = new java.util.ArrayList();

  public java.util.ArrayList _caucho_getDependList()
  {
    return _caucho_depends;
  }

  public void _caucho_addDepend(com.caucho.vfs.PersistentDependency depend)
  {
    super._caucho_addDepend(depend);
    com.caucho.jsp.JavaPage.addDepend(_caucho_depends, depend);
  }

  public boolean _caucho_isModified()
  {
    if (_caucho_isDead)
      return true;
    if (com.caucho.server.util.CauchoSystem.getVersionId() != 7170261747151080670L)
      return true;
    for (int i = _caucho_depends.size() - 1; i >= 0; i--) {
      com.caucho.vfs.Dependency depend;
      depend = (com.caucho.vfs.Dependency) _caucho_depends.get(i);
      if (depend.isModified())
        return true;
    }
    return false;
  }

  public long _caucho_lastModified()
  {
    return 0;
  }

  public java.util.HashMap<String,java.lang.reflect.Method> _caucho_getFunctionMap()
  {
    return _jsp_functionMap;
  }

  public void init(ServletConfig config)
    throws ServletException
  {
    com.caucho.server.webapp.WebApp webApp
      = (com.caucho.server.webapp.WebApp) config.getServletContext();
    super.init(config);
    com.caucho.jsp.TaglibManager manager = webApp.getJspApplicationContext().getTaglibManager();
    com.caucho.jsp.PageContextImpl pageContext = new com.caucho.jsp.PageContextImpl(webApp, this);
  }

  public void destroy()
  {
      _caucho_isDead = true;
      super.destroy();
  }

  public void init(com.caucho.vfs.Path appDir)
    throws javax.servlet.ServletException
  {
    com.caucho.vfs.Path resinHome = com.caucho.server.util.CauchoSystem.getResinHome();
    com.caucho.vfs.MergePath mergePath = new com.caucho.vfs.MergePath();
    mergePath.addMergePath(appDir);
    mergePath.addMergePath(resinHome);
    com.caucho.loader.DynamicClassLoader loader;
    loader = (com.caucho.loader.DynamicClassLoader) getClass().getClassLoader();
    String resourcePath = loader.getResourcePathSpecificFirst();
    mergePath.addClassPath(resourcePath);
    com.caucho.vfs.Depend depend;
    depend = new com.caucho.vfs.Depend(appDir.lookup("admin/template/get_Template_xml.jsp"), -5313445672748706129L, false);
    com.caucho.jsp.JavaPage.addDepend(_caucho_depends, depend);
  }

  private final static char []_jsp_string0;
  static {
    _jsp_string0 = "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n".toCharArray();
  }
}
