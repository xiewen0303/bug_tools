/*
 * JSP generated by Resin-3.1.12 (built Mon, 29 Aug 2011 03:22:08 PDT)
 */

package _jsp._filter;
import javax.servlet.*;
import javax.servlet.jsp.*;
import javax.servlet.http.*;
import java.util.Map;
import java.util.Arrays;
import java.util.HashSet;
import java.util.ArrayList;
import java.util.List;
import com.sogou.qadev.service.cynthia.bean.UUID;
import com.sogou.qadev.service.cynthia.factory.DataAccessFactory;
import com.sogou.qadev.service.cynthia.bean.Data;
import com.sogou.qadev.service.cynthia.service.FilterQueryManager;
import com.sogou.qadev.service.cynthia.bean.Filter;
import com.sogou.qadev.cache.impl.TemplateCache;
import com.sogou.qadev.service.cynthia.util.FilterDataAssembleUtil;
import com.sogou.qadev.service.cynthia.util.FileUtil;
import com.sogou.qadev.service.cynthia.util.ConfigUtil;
import com.sogou.qadev.service.cynthia.util.URLUtil;
import com.sogou.qadev.service.cynthia.service.DataAccessSession;
import com.sogou.qadev.service.cynthia.util.CommonUtil;
import com.sogou.qadev.service.cynthia.util.XMLUtil;
import org.w3c.dom.*;
import javax.xml.parsers.*;
import com.sogou.qadev.service.cynthia.bean.Key;

public class _filter__jsp extends com.caucho.jsp.JavaPage
{
  private static final java.util.HashMap<String,java.lang.reflect.Method> _jsp_functionMap = new java.util.HashMap<String,java.lang.reflect.Method>();
  private boolean _caucho_isDead;
  
  public void
  _jspService(javax.servlet.http.HttpServletRequest request,
              javax.servlet.http.HttpServletResponse response)
    throws java.io.IOException, javax.servlet.ServletException
  {
    javax.servlet.http.HttpSession session = request.getSession(true);
    com.caucho.server.webapp.WebApp _jsp_application = _caucho_getApplication();
    javax.servlet.ServletContext application = _jsp_application;
    com.caucho.jsp.PageContextImpl pageContext = _jsp_application.getJspApplicationContext().allocatePageContext(this, _jsp_application, request, response, null, session, 8192, true, false);
    javax.servlet.jsp.PageContext _jsp_parentContext = pageContext;
    javax.servlet.jsp.JspWriter out = pageContext.getOut();
    final javax.el.ELContext _jsp_env = pageContext.getELContext();
    javax.servlet.ServletConfig config = getServletConfig();
    javax.servlet.Servlet page = this;
    response.setContentType("text/html");
    response.setCharacterEncoding("UTF-8");
    request.setCharacterEncoding("UTF-8");
    try {
      out.write(_jsp_string0, 0, _jsp_string0.length);
      
	response.setHeader("Cache-Control","no-cache"); //Forces caches to obtain a new copy of the page from the origin server
	response.setHeader("Cache-Control","no-store"); //Directs caches not to store the page under any circumstance
	response.setDateHeader("Expires", 0); //Causes the proxy cache to see the page as "stale"
	response.setHeader("Pragma","no-cache"); //HTTP 1.0 backward compatibility    
	out.clear();
	
	Key key = (Key)session.getAttribute("key");
	Long keyId = (Long)session.getAttribute("kid");
	
	if(keyId == null || keyId <= 0 || key == null){
		response.sendRedirect(ConfigUtil.getCynthiaWebRoot());
		return;
	}
	
	String filterIdStr = request.getParameter("filterId");
	String startStr    = request.getParameter("start");
	String limitStr    = request.getParameter("limit");
	String sort        = request.getParameter("sort");
	String dir         = request.getParameter("dir");
	
	int start          = startStr == null?0:Integer.parseInt(startStr);
	int limit          = limitStr == null?50:Integer.parseInt(limitStr);
	int	pagenum        = (start/limit) + 1;
	int	count          = limit;
	
	String username    = key.getUsername();
	
	if(filterIdStr == null)
		return;
	
	UUID filterId = DataAccessFactory.getInstance().createUUID(filterIdStr);
	DataAccessSession das = DataAccessFactory.getInstance().createDataAccessSession(username,keyId);
	
	Filter filter = das.queryFilter(filterId);
	if(filter == null)
		return;
	
	StringBuffer result = new StringBuffer();
	
	try
	{
		Document filterDocument = XMLUtil.string2Document(filter.getXml(),"UTF-8");
		Node templateTypeNode   = XMLUtil.getSingleNode(filterDocument,"query/templateType");
		UUID templateTypeId     = null;
		UUID templateId         = null;
		
		List<Data> dataList= new ArrayList<Data>();
		HashSet<String>	notNewTaskIdSet	= new HashSet<String>();
		
		int totalTaskAccount = 0;	
		
		boolean isSysFilter = FilterQueryManager.isSysFilter(filterIdStr);
			
		if(!isSysFilter){
			Node templateNode = XMLUtil.getSingleNode(filterDocument, "query/template");
			templateId = DataAccessFactory.getInstance().createUUID(XMLUtil.getAttribute(templateNode, "id"));
		}
		
		dataList = FilterQueryManager.queryDataList(das,filter,username,keyId,sort,dir,pagenum,count,null);  //\u67e5\u8be2\u6570\u636e
		
		UUID[]	filterIdArray = new UUID[]{filterId};
		String xmlString = das.getNewTaskIdsByFilterAndUser(filterIdArray, username);
		
		Document xmlDoc	= XMLUtil.string2Document(xmlString, "UTF-8");
		Node filterNode = XMLUtil.getNodes(xmlDoc,"filters/filter").get(0);
		String oldIdStrs = XMLUtil.getSingleNodeTextContent(filterNode,"oldTasks");
		totalTaskAccount += Integer.parseInt(XMLUtil.getAttribute(filterNode, "totalAccount"));
		
		if(oldIdStrs != null){
			String[] oldIdStrArray = oldIdStrs.split(",");
			notNewTaskIdSet.addAll(Arrays.asList(oldIdStrArray));
		}
		
		//\u5f00\u59cb\u62fc\u88c5\u6570\u636e
		//\u83b7\u5f97\u8981\u663e\u793a\u7684\u5b57\u6bb5
		String[] displayFieldsName = FilterQueryManager.getDisplayNamesFilter(filter.getXml(), das);
		
		Map<String,String> userClassifyDataMap = das.getUserClassifyDataMap(username);
		
		result.append("{").append("\"totalCount\":\"").append(totalTaskAccount).append("\"")
			  .append(",\"newCount\":\"").append(totalTaskAccount - notNewTaskIdSet.size()).append("\"")
			  .append(",\"rows\":[");
		
		result.append(FilterQueryManager.assembleFilterDataJson(displayFieldsName,dataList,notNewTaskIdSet,userClassifyDataMap , das , isSysFilter));
		result.append("]").append("}");
		
	}catch(Exception e)
	{
		result.append("{").append("\"isError\":\"true\"}");
	}
	
	out.print(result.toString());

      out.write('\n');
    } catch (java.lang.Throwable _jsp_e) {
      pageContext.handlePageException(_jsp_e);
    } finally {
      _jsp_application.getJspApplicationContext().freePageContext(pageContext);
    }
  }

  private java.util.ArrayList _caucho_depends = new java.util.ArrayList();

  public java.util.ArrayList _caucho_getDependList()
  {
    return _caucho_depends;
  }

  public void _caucho_addDepend(com.caucho.vfs.PersistentDependency depend)
  {
    super._caucho_addDepend(depend);
    com.caucho.jsp.JavaPage.addDepend(_caucho_depends, depend);
  }

  public boolean _caucho_isModified()
  {
    if (_caucho_isDead)
      return true;
    if (com.caucho.server.util.CauchoSystem.getVersionId() != 7170261747151080670L)
      return true;
    for (int i = _caucho_depends.size() - 1; i >= 0; i--) {
      com.caucho.vfs.Dependency depend;
      depend = (com.caucho.vfs.Dependency) _caucho_depends.get(i);
      if (depend.isModified())
        return true;
    }
    return false;
  }

  public long _caucho_lastModified()
  {
    return 0;
  }

  public java.util.HashMap<String,java.lang.reflect.Method> _caucho_getFunctionMap()
  {
    return _jsp_functionMap;
  }

  public void init(ServletConfig config)
    throws ServletException
  {
    com.caucho.server.webapp.WebApp webApp
      = (com.caucho.server.webapp.WebApp) config.getServletContext();
    super.init(config);
    com.caucho.jsp.TaglibManager manager = webApp.getJspApplicationContext().getTaglibManager();
    com.caucho.jsp.PageContextImpl pageContext = new com.caucho.jsp.PageContextImpl(webApp, this);
  }

  public void destroy()
  {
      _caucho_isDead = true;
      super.destroy();
  }

  public void init(com.caucho.vfs.Path appDir)
    throws javax.servlet.ServletException
  {
    com.caucho.vfs.Path resinHome = com.caucho.server.util.CauchoSystem.getResinHome();
    com.caucho.vfs.MergePath mergePath = new com.caucho.vfs.MergePath();
    mergePath.addMergePath(appDir);
    mergePath.addMergePath(resinHome);
    com.caucho.loader.DynamicClassLoader loader;
    loader = (com.caucho.loader.DynamicClassLoader) getClass().getClassLoader();
    String resourcePath = loader.getResourcePathSpecificFirst();
    mergePath.addClassPath(resourcePath);
    com.caucho.vfs.Depend depend;
    depend = new com.caucho.vfs.Depend(appDir.lookup("filter/filter.jsp"), 381838644356942436L, false);
    com.caucho.jsp.JavaPage.addDepend(_caucho_depends, depend);
  }

  private final static char []_jsp_string0;
  static {
    _jsp_string0 = "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n".toCharArray();
  }
}
