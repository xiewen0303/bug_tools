/*
 * JSP generated by Resin-3.1.12 (built Mon, 29 Aug 2011 03:22:08 PDT)
 */

package _jsp._filtermanage;
import javax.servlet.*;
import javax.servlet.jsp.*;
import javax.servlet.http.*;
import com.sogou.qadev.service.cynthia.factory.DataAccessFactory;
import com.sogou.qadev.service.cynthia.service.DataAccessSession;
import com.sogou.qadev.service.cynthia.bean.UUID;
import com.sogou.qadev.service.cynthia.bean.Key;
import org.w3c.dom.Node;
import org.w3c.dom.Document;
import com.sogou.qadev.service.cynthia.util.ConfigUtil;
import com.sogou.qadev.service.cynthia.service.ConfigManager;
import com.sogou.qadev.service.cynthia.service.ProjectInvolveManager;
import com.sogou.qadev.service.cynthia.util.XMLUtil;
import com.sogou.qadev.service.cynthia.service.DataManager;
import com.sogou.qadev.service.cynthia.bean.Role;
import com.sogou.qadev.service.cynthia.bean.Right;
import com.sogou.qadev.service.cynthia.bean.UserInfo;
import com.sogou.qadev.service.cynthia.bean.CommonOption;
import com.sogou.qadev.service.cynthia.bean.CommonField;
import com.sogou.qadev.service.cynthia.bean.Template;
import com.sogou.qadev.service.cynthia.bean.Stat;
import com.sogou.qadev.service.cynthia.bean.Flow;
import com.sogou.qadev.service.cynthia.bean.Option;
import com.sogou.qadev.service.cynthia.bean.Data;
import com.sogou.qadev.service.cynthia.bean.Field;
import com.sogou.qadev.service.cynthia.bean.Action;
import com.sogou.qadev.service.cynthia.bean.Attachment;
import java.util.*;
import org.w3c.dom.*;

public class _addfield__jsp extends com.caucho.jsp.JavaPage
{
  private static final java.util.HashMap<String,java.lang.reflect.Method> _jsp_functionMap = new java.util.HashMap<String,java.lang.reflect.Method>();
  private boolean _caucho_isDead;

  Map<String,String> getTemplateFields(DataAccessSession das,Template template)
  	{
  		Map<String,String> fields = new LinkedHashMap<String,String>();
  		if(template == null)
  			return fields;
  		Set<Field> fieldSet = template.getFields();
  		fields.put("title","\u6807\u9898");
  		fields.put("description","\u63cf\u8ff0");
  		fields.put("status_id","\u72b6\u6001");
  		fields.put("assign_user","\u6307\u6d3e\u4eba");
  		fields.put("last_modify_time","\u4fee\u6539\u65f6\u95f4");
  		fields.put("create_user","\u521b\u5efa\u4eba");
  		fields.put("create_time","\u521b\u5efa\u65f6\u95f4");
  		fields.put("action_time_range","\u52a8\u4f5c\u65f6\u95f4\u8303\u56f4");
  		fields.put("action_id","\u52a8\u4f5c");
  		fields.put("log_create_user","\u6267\u884c\u4eba\u5458");
  		
  		for(Field field : fieldSet)
  		{
  			if(field.getName()!=null&&field.getName().indexOf("\u5e9f\u5f03")>=0)
  				continue;
  			fields.put(field.getId().toString(),field.getName());
  		}
  		return fields;
  	}
  
  	private CommonField getCommonField(Template template,String fieldId,DataAccessSession das)
  	{
  		CommonField commonField = new CommonField();
  		if(fieldId == null)
  		{
  			return null;
  		}else if("title".equals(fieldId))
  		{
  			commonField.setId("title");
  			commonField.setName("\u6807\u9898");
  			commonField.setType("input");
  			commonField.setDataType("string");
  		}else if("description".equals(fieldId))
  		{
  			commonField.setId("description");
  			commonField.setName("\u63cf\u8ff0");
  			commonField.setType("input");
  			commonField.setDataType("string");
  		}else if("status_id".equals(fieldId))
  		{
  			commonField.setId("status_id");
  			commonField.setName("\u72b6\u6001");
  			commonField.setType("status_id");
  		}else if("action_id".equals(fieldId))
  		{
  			commonField.setId("action_id");
  			commonField.setName("\u52a8\u4f5c");
  			commonField.setType("action_id");
  		}else if("assign_user".equals(fieldId))
  		{
  			commonField.setId("assign_user");
  			commonField.setName("\u6307\u6d3e\u4eba");
  			commonField.setType("assign_user");
  		}else if("create_user".equals(fieldId))
  		{
  			commonField.setId("create_user");
  			commonField.setName("\u521b\u5efa\u4eba");
  			commonField.setType("create_user");
  		}else if("create_time".equals(fieldId))
  		{
  			commonField.setId("create_time");
  			commonField.setName("\u521b\u5efa\u65f6\u95f4");
  			commonField.setType("timestamp");
  		}else if("last_modify_time".equals(fieldId))
  		{
  			commonField.setId("last_modify_time");
  			commonField.setName("\u4fee\u6539\u65f6\u95f4");
  			commonField.setType("timestamp");
  		}else if("action_time_range".equals(fieldId))
  		{
  			commonField.setId("action_time_range");
  			commonField.setName("\u52a8\u4f5c\u65f6\u95f4\u8303\u56f4");
  			commonField.setType("timestamp");
  		}else if("log_create_user".equals(fieldId))
  		{
  			commonField.setId("log_create_user");
  			commonField.setName("\u6267\u884c\u4eba\u5458");
  			commonField.setType("log_create_user");
  		}else
  		{
  			Set<Field> fieldSet = template.getFields();
  			if(fieldSet == null)
  				return null;
  
  			for(Field field : fieldSet)
  			{
  
  				if(fieldId.equals(field.getId().toString()))
  				{
  					commonField.setId(field.getId().toString());
  					commonField.setName(field.getName());
  					commonField.setType(field.getType().toString().split("\\_")[1]);
  					if(field.getDataType() != null)
  						commonField.setDataType(field.getDataType().toString().split("\\_")[1]);
  					break;
  				}
  			}
  		}
  
  		return commonField;
  	}
  
  	private Set<CommonOption> getCommonFieldOptionSet(Template template,String fieldId,DataAccessSession das)
  	{
  		Set<CommonOption> optionSet = new TreeSet<CommonOption>();
  		if(template == null)
  			return optionSet;
  		Flow flow = das.queryFlow(template.getFlowId());
  		if(flow == null)
  			return optionSet;
  		if("status_id".equals(fieldId))
  		{
  			Stat[] statusArray = das.queryTemplateStats(template.getId());
  			for(Stat status : statusArray)
  			{
  				CommonOption option = new CommonOption(status.getId().toString(), status.getName());
  				optionSet.add(option);
  			}
  			CommonOption logicalBeginOption = new CommonOption("[\u903b\u8f91\u5f00\u59cb]", "[\u903b\u8f91\u5f00\u59cb]");
  			optionSet.add(logicalBeginOption);
  			CommonOption logicalEndOption = new CommonOption("[\u903b\u8f91\u5173\u95ed]", "[\u903b\u8f91\u5173\u95ed]");
  			optionSet.add(logicalEndOption);
  		}else if("action_id".equals(fieldId))
  		{
  			Action[] actionsArray = flow.getActions();
  			for(Action action : actionsArray){
  				CommonOption option = new CommonOption(action.getId().toString(),action.getName());
  				optionSet.add(option);
  			}
  			CommonOption editOption = new CommonOption(Action.editUUID.toString(),Action.editName);
  			optionSet.add(editOption);
  		}else if("assign_user".equals(fieldId))
  		{
  			
  			List<UserInfo> allAssignUserList = new ArrayList<UserInfo>();
  			
  			if (template.getTemplateConfig().isProjectInvolve()) {
  				allAssignUserList = ProjectInvolveManager.getInstance().getCompanyUsersByMail(das.getUsername());
  			}else{
  				Set<String> assignUserSet = new HashSet<String>();
  				
  				for(Right right : flow.getRightSet()){
  					assignUserSet.add(right.getUsername());
  				}
  				
  				//\u8868\u5355\u4e2d\u7684\u6240\u6709\u6307\u6d3e\u4eba\u5458
  				assignUserSet.addAll(Arrays.asList(das.queryTemplateAssignUsers(template.getId())));
  				allAssignUserList = das.queryAllUserInfo(assignUserSet.toArray(new String[0]));
  				
  				//\u666e\u901a\u8868\u5355\u589e\u52a0\u89d2\u8272\u67e5\u8be2\uff0c\u9879\u76ee\u8868\u5355\u4e0d\u52a0
  				Role[] rolesArray = flow.getRoles();
  				for(Role role : rolesArray)
  				{
  					CommonOption option = new CommonOption("role_" + role.getId().getValue(), "[" + role.getName() + "]");
  					optionSet.add(option);
  				}
  			}
  			
  			for(UserInfo userInfo : allAssignUserList)
  			{
  				CommonOption option = new CommonOption(userInfo.getUserName(), userInfo.getNickName());
  				optionSet.add(option);
  			}
  			
  		}else if("create_user".equals(fieldId))
  		{
  			
  			Set<Right> allFlowRights = flow.getRightSet();
  			Set<String> createUserSet = new HashSet<String>();
  			
  			for(Right right : allFlowRights){
  				createUserSet.add(right.getUsername());
  			}
  			//\u8868\u5355\u4e2d\u7684\u6240\u6709\u521b\u5efa\u4eba\u5458
  			createUserSet.addAll(Arrays.asList(das.queryTemplateCreateUsers(template.getId())));
  			
  			List<UserInfo> allCreateUserList = das.queryAllUserInfo(createUserSet.toArray(new String[0]));
  			for(UserInfo userInfo : allCreateUserList)
  			{
  				CommonOption option = new CommonOption(userInfo.getUserName(), userInfo.getNickName());
  				optionSet.add(option);
  			}
  			
  			if(!ConfigManager.getProjectInvolved()){
  				Role[] rolesArray = flow.getRoles();
  				for(Role role : rolesArray)
  				{
  					CommonOption option = new CommonOption("role_" + role.getId().getValue(), "[" + role.getName() + "]");
  					optionSet.add(option);
  				}
  			}
  			
  		}else if("log_create_user".equals(fieldId))
  		{
  			Set<Right> allFlowRights = flow.getRightSet();
  			Set<String> assignUserSet = new HashSet<String>();
  			
  			for(Right right : allFlowRights){
  				assignUserSet.add(right.getUsername());
  			}
  			
  			List<UserInfo> allAssignUserList = das.queryAllUserInfo(assignUserSet.toArray(new String[0]));
  			for(UserInfo userInfo : allAssignUserList)
  			{
  				CommonOption option = new CommonOption(userInfo.getUserName(), userInfo.getNickName());
  				optionSet.add(option);
  			}
  			
  			if(!ConfigManager.getProjectInvolved()){
  				Role[] rolesArray = flow.getRoles();
  				for(Role role : rolesArray)
  				{
  					CommonOption option = new CommonOption("role_" + role.getId().getValue(), "[" + role.getName() + "]");
  					optionSet.add(option);
  				}
  			}
  			
  		}else
  		{
  			Set<Field> fieldSet = template.getFields();
  			for(Field field : fieldSet)
  			{
  				if(fieldId.equals(field.getId().toString()))
  				{
  					if(field.getType().equals(Field.Type.t_selection))
  					{
  						Set<Option> allOptions = field.getOptions();
  						
  						if(allOptions != null && allOptions.size() > 0)
  						{
  							for(Option option : allOptions)
  							{
  								CommonOption commonOption = new CommonOption();
  								commonOption.setId(option.getId().toString());
  								commonOption.setName(option.getName());
  								optionSet.add(commonOption);
  							}
  						}
  					}
  					else if(field.getType().equals(Field.Type.t_reference))
  					{
  						Data[] referenceArray = das.queryTemplateFieldReferences(template.getId(), field.getId());
  						if(referenceArray != null && referenceArray.length > 0)
  						{
  							for(Data reference : referenceArray)
  							{
  								CommonOption commonOption = new CommonOption();
  								commonOption.setId(reference.getId().toString());
  								commonOption.setName(reference.getTitle());
  								optionSet.add(commonOption);
  							}
  						}
  					}
  					else if(field.getType().equals(Field.Type.t_attachment))
  					{
  						Attachment[] attachmentArray = das.queryTemplateFieldAttachments(template.getId(), field.getId());
  						if(attachmentArray != null && attachmentArray.length > 0)
  						{
  							for(Attachment attachment : attachmentArray)
  							{
  								CommonOption commonOption = new CommonOption();
  								commonOption.setId(attachment.getId().toString());
  								commonOption.setName(attachment.getName());
  								optionSet.add(commonOption);
  							}
  						}
  					}
  					break;
  				}
  			}
  		}
  
  		return optionSet;
  	}
  
  	private Map<String, CommonField> getAllCommonFieldMap(Template template,DataAccessSession das)
  	{
  		Map<String,CommonField> fieldMap = new HashMap<String,CommonField>();
  		//title field
  		CommonField titleField = new CommonField();
  		titleField.setId("title");
  		titleField.setName("\u6807\u9898");
  		titleField.setType("input");
  		titleField.setDataType("string");
  		fieldMap.put("title", titleField);
  
  		//description field  \u53d6\u6d88\u63cf\u8ff0\u6392\u5e8f
  // 		CommonField descriptionField = new CommonField();
  // 		descriptionField.setId("description");
  // 		descriptionField.setName("\u63cf\u8ff0");
  // 		descriptionField.setType("input");
  // 		descriptionField.setDataType("text");
  // 		fieldMap.put("description", descriptionField);
  
  		//create_user field
  		CommonField createUserField = new CommonField();
  		createUserField.setId("create_user");
  		createUserField.setName("\u521b\u5efa\u4eba");
  		createUserField.setType("create_user");
  		fieldMap.put("create_user", createUserField);
  
  		//create_time field
  		CommonField createTimeField = new CommonField();
  		createTimeField.setId("create_time");
  		createTimeField.setName("\u521b\u5efa\u65f6\u95f4");
  		createTimeField.setType("timestamp");
  		fieldMap.put("create_time", createTimeField);
  
  		//assign_user field
  		CommonField assignUserField = new CommonField();
  		assignUserField.setId("assign_user");
  		assignUserField.setName("\u6307\u6d3e\u4eba");
  		assignUserField.setType("assign_user");
  		fieldMap.put("assign_user", assignUserField);
  
  
  		//last_modify_time field
  		CommonField lastModifyTimeField = new CommonField();
  		lastModifyTimeField.setId("last_modify_time");
  		lastModifyTimeField.setName("\u4fee\u6539\u65f6\u95f4");
  		lastModifyTimeField.setType("timestamp");
  		fieldMap.put("last_modify_time", lastModifyTimeField);
  
  		//status field
  		CommonField statusField = new CommonField();
  		statusField.setId("status_id");
  		statusField.setName("\u72b6\u6001");
  		statusField.setType("status_id");
  		fieldMap.put("status_id", statusField);
  
  		//\u67d0\u4e2a\u65f6\u95f4\u8303\u56f4\u5185\u505a\u7684\u52a8\u4f5c
  		CommonField actionTimeRangeField = new CommonField();
  		actionTimeRangeField.setId("action_time_range");
  		actionTimeRangeField.setName("\u52a8\u4f5c\u65f6\u95f4\u8303\u56f4");
  		actionTimeRangeField.setType("timestamp");
  		fieldMap.put("action_time_range",actionTimeRangeField);
  
  		//\u8be5\u8868\u5355\u5bf9\u5e94\u7684\u52a8\u4f5c
  		CommonField actionField = new CommonField();
  		actionField.setId("action_id");
  		actionField.setName("\u52a8\u4f5c");
  		actionField.setType("action_id");
  		fieldMap.put("action_id",actionField);
  
  		//ext fields
  		Set<Field> fieldSet = template.getFields();
  		if(fieldSet != null)
  		{
  			for(Field field : fieldSet)
  			{
  
  				if(field.getName()!=null&&field.getName().indexOf("\u5e9f\u5f03")>=0)
  					continue;
  
  				CommonField commonField = new CommonField();
  				commonField.setId(field.getId().toString());
  				commonField.setName(field.getName());
  				commonField.setType(field.getType().toString().split("\\_")[1]);
  				if(field.getDataType() != null)
  					commonField.setDataType(field.getDataType().toString().split("\\_")[1]);
  				fieldMap.put(field.getId().toString(),commonField);
  			}
  		}
  		return fieldMap;
  	}
  
  	String queryFieldHTML(DataAccessSession das,UUID templateId,String fieldId, Map<String, Set<Object>> whereFieldMap,
  			Map<String, CommonField> displayFieldMap, Map<String, CommonField> orderFieldMap, int orderIndent)
  	{
  
  		if(displayFieldMap == null)
  		{
  			displayFieldMap = new LinkedHashMap<String, CommonField>();
  
  			CommonField titleField = new CommonField();
  			titleField.setId("title");
  			titleField.setName("\u6807\u9898");
  			titleField.setType("title");
  			displayFieldMap.put("title", titleField);
  
  			CommonField statusField = new CommonField();
  			statusField.setId("status_id");
  			statusField.setName("\u72b6\u6001");
  			statusField.setType("status_id");
  			displayFieldMap.put("status_id", statusField);
  
  			CommonField assignUserField = new CommonField();
  			assignUserField.setId("assign_user");
  			assignUserField.setName("\u6307\u6d3e\u4eba");
  			assignUserField.setType("assign_user");
  			displayFieldMap.put("assign_user", assignUserField);
  
  			CommonField lastModifyTimeField = new CommonField();
  			lastModifyTimeField.setId("last_modify_time");
  			lastModifyTimeField.setName("\u4fee\u6539\u65f6\u95f4");
  			lastModifyTimeField.setType("last_modify_time");
  			displayFieldMap.put("last_modify_time", lastModifyTimeField);
  
  			CommonField createUserField = new CommonField();
  			createUserField.setId("create_user");
  			createUserField.setName("\u521b\u5efa\u4eba");
  			createUserField.setType("create_user");
  			displayFieldMap.put("create_user", createUserField);
  
  			CommonField createTimeField = new CommonField();
  			createTimeField.setId("create_time");
  			createTimeField.setName("\u521b\u5efa\u65f6\u95f4");
  			createTimeField.setType("create_time");
  			displayFieldMap.put("create_time", createTimeField);
  			
  			CommonField logCreateUserField = new CommonField();
  			createTimeField.setId("log_create_user");
  			createTimeField.setName("\u6267\u884c\u4eba\u5458");
  			createTimeField.setType("log_create_user");
  			displayFieldMap.put("log_create_user", logCreateUserField);
  		}
  
  		Template template = das.queryTemplate(templateId);
  		CommonField field = this.getCommonField(template,fieldId,das);
  	
  		if(field == null||field.getType() == null)
  			return "";
  		
  		if(field.getType().equals("status_id")
  					|| field.getType().equals("create_user")
  					|| field.getType().equals("assign_user")
  					|| field.getType().equals("action_id")
  					|| field.getType().equals("log_create_user"))
  		{
  			return (getWhereFieldBaseHTML(templateId + "_" + fieldId, field, this.getCommonFieldOptionSet(template,fieldId,das), (whereFieldMap == null ? null : whereFieldMap.get(fieldId))));
  		}
  		else if(field.getType().equals("selection")
  					|| field.getType().equals("reference")
  						|| field.getType().equals("attachment"))
  		{
  			return (getWhereFieldSelectionHTML(templateId + "_" + fieldId, field, this.getCommonFieldOptionSet(template,fieldId,das), (whereFieldMap == null ? null : whereFieldMap.get(fieldId))));
  		}
  		else if(field.getType().equals("input")
  					|| field.getType().equals("timestamp"))
  		{
  			return (getWhereFieldInputHTML(templateId + "_" + fieldId, field, (whereFieldMap == null ? null : whereFieldMap.get(fieldId))));
  		}
  		return "";
  	}
  
  	String queryOrderContentHTML(DataAccessSession das,UUID templateId, Map<String, CommonField> orderFieldMap, int orderIndent)
  	{
  		return getOrderFieldHTML("order_" + templateId, this.getAllCommonFieldMap(das.queryTemplate(templateId),das), orderFieldMap, orderIndent);
  	}
  
  	String queryTemplateTypeHTML(DataAccessSession das, UUID templateTypeId, Map<String, Set<Object>> whereFieldMap,
  			Map<String, CommonField> displayFieldMap, Map<String, CommonField> orderFieldMap, int orderIndent)
  	{
  		if(displayFieldMap == null)
  		{
  			displayFieldMap = new LinkedHashMap<String, CommonField>();
  
  			CommonField titleField = new CommonField();
  			titleField.setId("title");
  			titleField.setName("\u6807\u9898");
  			titleField.setType("title");
  			displayFieldMap.put("title", titleField);
  
  			CommonField statusField = new CommonField();
  			statusField.setId("status_id");
  			statusField.setName("\u72b6\u6001");
  			statusField.setType("status_id");
  			displayFieldMap.put("status_id", statusField);
  
  			CommonField assignUserField = new CommonField();
  			assignUserField.setId("assign_user");
  			assignUserField.setName("\u6307\u6d3e\u4eba");
  			assignUserField.setType("assign_user");
  			displayFieldMap.put("assign_user", assignUserField);
  
  			CommonField lastModifyTimeField = new CommonField();
  			lastModifyTimeField.setId("last_modify_time");
  			lastModifyTimeField.setName("\u4fee\u6539\u65f6\u95f4");
  			lastModifyTimeField.setType("last_modify_time");
  			displayFieldMap.put("last_modify_time", lastModifyTimeField);
  
  			CommonField createUserField = new CommonField();
  			createUserField.setId("create_user");
  			createUserField.setName("\u521b\u5efa\u4eba");
  			createUserField.setType("create_user");
  			displayFieldMap.put("create_user", createUserField);
  
  			CommonField createTimeField = new CommonField();
  			createTimeField.setId("create_time");
  			createTimeField.setName("\u521b\u5efa\u65f6\u95f4");
  			createTimeField.setType("create_time");
  			displayFieldMap.put("create_time", createTimeField);
  		}
  
  		Map<String, CommonField> fieldMap = new LinkedHashMap<String, CommonField>();
  		Map<String, Set<CommonOption>> fieldOptionMap = new LinkedHashMap<String, Set<CommonOption>>();
  
  		//title field
  		CommonField titleField = new CommonField();
  		titleField.setId("title");
  		titleField.setName("\u6807\u9898");
  		titleField.setType("input");
  		titleField.setDataType("string");
  		fieldMap.put("title", titleField);
  
  		//description field
  		CommonField descriptionField = new CommonField();
  		descriptionField.setId("description");
  		descriptionField.setName("\u63cf\u8ff0");
  		descriptionField.setType("input");
  		descriptionField.setDataType("text");
  		fieldMap.put("description", descriptionField);
  
  		//create_user field
  		CommonField createUserField = new CommonField();
  		createUserField.setId("create_user");
  		createUserField.setName("\u521b\u5efa\u4eba");
  		createUserField.setType("create_user");
  		fieldMap.put("create_user", createUserField);
  		fieldOptionMap.put("create_user", new TreeSet<CommonOption>());
  		String[] createUserArray = das.queryTemplateTypeCreateUsers(templateTypeId);
  		for(String createUser : createUserArray)
  		{
  			CommonOption option = new CommonOption(createUser, createUser);
  			fieldOptionMap.get("create_user").add(option);
  		}
  
  		//create_time field
  		CommonField createTimeField = new CommonField();
  		createTimeField.setId("create_time");
  		createTimeField.setName("\u521b\u5efa\u65f6\u95f4");
  		createTimeField.setType("timestamp");
  		fieldMap.put("create_time", createTimeField);
  
  		//assign_user field
  		CommonField assignUserField = new CommonField();
  		assignUserField.setId("assign_user");
  		assignUserField.setName("\u6307\u6d3e\u4eba");
  		assignUserField.setType("assign_user");
  		fieldMap.put("assign_user", assignUserField);
  		fieldOptionMap.put("assign_user", new TreeSet<CommonOption>());
  		String[] assignUserArray = das.queryTemplateTypeAssignUsers(templateTypeId);
  		for(String assignUser : assignUserArray)
  		{
  			CommonOption option = new CommonOption(assignUser, assignUser);
  			fieldOptionMap.get("assign_user").add(option);
  		}
  
  		//last_modify_time field
  		CommonField lastModifyTimeField = new CommonField();
  		lastModifyTimeField.setId("last_modify_time");
  		lastModifyTimeField.setName("\u4fee\u6539\u65f6\u95f4");
  		lastModifyTimeField.setType("timestamp");
  		fieldMap.put("last_modify_time", lastModifyTimeField);
  
  		//status field
  		CommonField statusField = new CommonField();
  		statusField.setId("status_id");
  		statusField.setName("\u72b6\u6001");
  		statusField.setType("status_id");
  		fieldMap.put("status_id", statusField);
  		fieldOptionMap.put("status_id", new TreeSet<CommonOption>());
  		String[] statusArray = das.queryTemplateTypeStats(templateTypeId);
  		for(String status : statusArray)
  		{
  			CommonOption option = new CommonOption(status, status);
  			fieldOptionMap.get("status_id").add(option);
  		}
  		CommonOption logicalBeginOption = new CommonOption("[\u903b\u8f91\u5f00\u59cb]", "[\u903b\u8f91\u5f00\u59cb]");
  		fieldOptionMap.get("status_id").add(logicalBeginOption);
  		CommonOption logicalEndOption = new CommonOption("[\u903b\u8f91\u5173\u95ed]", "[\u903b\u8f91\u5173\u95ed]");
  		fieldOptionMap.get("status_id").add(logicalEndOption);
  
  
  		//\u62fc\u88c5\u8fd4\u56de\u503c
  		StringBuffer mainTableHTML = new StringBuffer(64);
  		mainTableHTML.append("<table width=\"100%\">");
  
  		mainTableHTML.append("<tr>");
  
  		StringBuffer leftMainTableHTML = new StringBuffer(64);
  		leftMainTableHTML.append("<table id=\"table_left_main_").append(templateTypeId).append("\" width=\"100%\">");
  
  		StringBuffer rightMainTableHTML = new StringBuffer(64);
  		rightMainTableHTML.append("<table id=\"table_right_main_").append(templateTypeId).append("\" width=\"100%\">");
  
  		int index = 0;
  		for(String fieldId : fieldMap.keySet())
  		{
  			if(fieldId.equals("id"))
  				continue;
  
  			StringBuffer trHTML = new StringBuffer(64);
  
  			trHTML.append("<tr>");
  			trHTML.append("<td class=\"tdNoBottom\">");
  
  			CommonField field = fieldMap.get(fieldId);
  
  			if(field.getType().equals("status_id")
  					|| field.getType().equals("create_user")
  					|| field.getType().equals("assign_user"))
  			{
  				trHTML.append(getWhereFieldBaseHTML(templateTypeId + "_" + fieldId, field, fieldOptionMap.get(fieldId), (whereFieldMap == null ? null : whereFieldMap.get(fieldId))));
  			}
  			else if(field.getType().equals("selection")
  					|| field.getType().equals("reference"))
  			{
  				trHTML.append(getWhereFieldSelectionHTML(templateTypeId + "_" + fieldId, field, fieldOptionMap.get(fieldId), (whereFieldMap == null ? null : whereFieldMap.get(fieldId))));
  			}
  			else if(field.getType().equals("input")
  					|| field.getType().equals("timestamp"))
  			{
  				trHTML.append(getWhereFieldInputHTML(templateTypeId + "_" + fieldId, field, (whereFieldMap == null ? null : whereFieldMap.get(fieldId))));
  			}
  
  			trHTML.append("</td>");
  			trHTML.append("</tr>");
  
  			if(index % 2 == 0)
  			{
  				leftMainTableHTML.append(trHTML);
  			}
  			else
  			{
  				rightMainTableHTML.append(trHTML);
  			}
  
  			index++;
  		}
  
  		leftMainTableHTML.append("</table>");
  		rightMainTableHTML.append("</table>");
  
  		mainTableHTML.append("<td class=\"tdNoBottom\">");
  		mainTableHTML.append(leftMainTableHTML);
  		mainTableHTML.append("</td>");
  
  		mainTableHTML.append("<td class=\"tdNoBottom\">");
  		mainTableHTML.append(rightMainTableHTML);
  		mainTableHTML.append("</td>");
  
  		mainTableHTML.append("</tr>");
  
  		mainTableHTML.append("<tr>");
  		mainTableHTML.append("<td class=\"tdNoBottom\" colspan=\"2\"><input id=\"input_display_").append(templateTypeId).append("\" type=\"button\" onClick=\"displayArea('").append(templateTypeId).append("')\" value=\"\u6253\u5f00\u663e\u793a\u8bbe\u7f6e\"/></td>");
  		mainTableHTML.append("</tr>");
  		mainTableHTML.append("<tr id=\"tr_display_").append(templateTypeId).append("\" style=\"display:none\">");
  		mainTableHTML.append("<td id=\"td_display_").append(templateTypeId).append("\" colspan=\"2\" class=\"tdNoBottom\">");
  		mainTableHTML.append(getDisplayFieldHTML("display_" + templateTypeId, fieldMap, displayFieldMap));
  		mainTableHTML.append("</td>");
  		mainTableHTML.append("</tr>");
  
  		mainTableHTML.append("<tr>");
  		mainTableHTML.append("<td class=\"tdNoBottom\" colspan=\"2\"><input id=\"input_order_").append(templateTypeId).append("\" type=\"button\" onClick=\"orderArea('").append(templateTypeId).append("')\" value=\"\u6253\u5f00\u6392\u5e8f\u8bbe\u7f6e\"/></td>");
  		mainTableHTML.append("</tr>");
  		mainTableHTML.append("<tr id=\"tr_order_").append(templateTypeId).append("\" style=\"display:none\">");
  		mainTableHTML.append("<td id=\"td_order_").append(templateTypeId).append("\" colspan=\"2\" class=\"tdNoBottom\">");
  		mainTableHTML.append(getOrderFieldHTML("order_" + templateTypeId, fieldMap, orderFieldMap, orderIndent));
  		mainTableHTML.append("</td>");
  		mainTableHTML.append("</tr>");
  
  		mainTableHTML.append("</table>");
  
  		return mainTableHTML.toString();
  	}
  
  
  	String queryTemplateNodeHTML(DataAccessSession das, UUID templateId, Map<String, Set<Object>> whereFieldMap,
  			Map<String, CommonField> displayFieldMap, Map<String, CommonField> orderFieldMap, int orderIndent)
  	{
  		Map<String, CommonField> fieldMap = new LinkedHashMap<String, CommonField>();
  		Map<String, Set<CommonOption>> fieldOptionMap = new LinkedHashMap<String, Set<CommonOption>>();
  
  		if(displayFieldMap == null)
  		{
  			displayFieldMap = new LinkedHashMap<String, CommonField>();
  
  			CommonField titleField = new CommonField();
  			titleField.setId("title");
  			titleField.setName("\u6807\u9898");
  			titleField.setType("title");
  			displayFieldMap.put("title", titleField);
  
  			CommonField statusField = new CommonField();
  			statusField.setId("status_id");
  			statusField.setName("\u72b6\u6001");
  			statusField.setType("status_id");
  			displayFieldMap.put("status_id", statusField);
  
  			CommonField assignUserField = new CommonField();
  			assignUserField.setId("assign_user");
  			assignUserField.setName("\u6307\u6d3e\u4eba");
  			assignUserField.setType("assign_user");
  			displayFieldMap.put("assign_user", assignUserField);
  
  			CommonField lastModifyTimeField = new CommonField();
  			lastModifyTimeField.setId("last_modify_time");
  			lastModifyTimeField.setName("\u4fee\u6539\u65f6\u95f4");
  			lastModifyTimeField.setType("last_modify_time");
  			displayFieldMap.put("last_modify_time", lastModifyTimeField);
  
  			CommonField createUserField = new CommonField();
  			createUserField.setId("create_user");
  			createUserField.setName("\u521b\u5efa\u4eba");
  			createUserField.setType("create_user");
  			displayFieldMap.put("create_user", createUserField);
  
  			CommonField createTimeField = new CommonField();
  			createTimeField.setId("create_time");
  			createTimeField.setName("\u521b\u5efa\u65f6\u95f4");
  			createTimeField.setType("create_time");
  			displayFieldMap.put("create_time", createTimeField);
  		}
  
  		//title field
  		CommonField titleField = new CommonField();
  		titleField.setId("title");
  		titleField.setName("\u6807\u9898");
  		titleField.setType("input");
  		titleField.setDataType("string");
  		fieldMap.put("title", titleField);
  
  		//description field
  		CommonField descriptionField = new CommonField();
  		descriptionField.setId("description");
  		descriptionField.setName("\u63cf\u8ff0");
  		descriptionField.setType("input");
  		descriptionField.setDataType("text");
  		fieldMap.put("description", descriptionField);
  
  		//create_user field
  		CommonField createUserField = new CommonField();
  		createUserField.setId("create_user");
  		createUserField.setName("\u521b\u5efa\u4eba");
  		createUserField.setType("create_user");
  		fieldMap.put("create_user", createUserField);
  		fieldOptionMap.put("create_user", new TreeSet<CommonOption>());
  		String[] createUserArray = das.queryTemplateCreateUsers(templateId);
  		for(String createUser : createUserArray)
  		{
  			CommonOption option = new CommonOption(createUser, createUser);
  			fieldOptionMap.get("create_user").add(option);
  		}
  
  		//create_time field
  		CommonField createTimeField = new CommonField();
  		createTimeField.setId("create_time");
  		createTimeField.setName("\u521b\u5efa\u65f6\u95f4");
  		createTimeField.setType("timestamp");
  		fieldMap.put("create_time", createTimeField);
  
  		//assign_user field
  		CommonField assignUserField = new CommonField();
  		assignUserField.setId("assign_user");
  		assignUserField.setName("\u6307\u6d3e\u4eba");
  		assignUserField.setType("assign_user");
  		fieldMap.put("assign_user", assignUserField);
  		fieldOptionMap.put("assign_user", new TreeSet<CommonOption>());
  		String[] assignUserArray = das.queryTemplateAssignUsers(templateId);
  		for(String assignUser : assignUserArray)
  		{
  			CommonOption option = new CommonOption(assignUser, assignUser);
  			fieldOptionMap.get("assign_user").add(option);
  		}
  
  		//last_modify_time field
  		CommonField lastModifyTimeField = new CommonField();
  		lastModifyTimeField.setId("last_modify_time");
  		lastModifyTimeField.setName("\u4fee\u6539\u65f6\u95f4");
  		lastModifyTimeField.setType("timestamp");
  		fieldMap.put("last_modify_time", lastModifyTimeField);
  
  		//status field
  		CommonField statusField = new CommonField();
  		statusField.setId("status_id");
  		statusField.setName("\u72b6\u6001");
  		statusField.setType("status_id");
  		fieldMap.put("status_id", statusField);
  		fieldOptionMap.put("status_id", new TreeSet<CommonOption>());
  		Stat[] statusArray = das.queryTemplateStats(templateId);
  		for(Stat status : statusArray)
  		{
  			CommonOption option = new CommonOption(status.getId().toString(), status.getName());
  			fieldOptionMap.get("status_id").add(option);
  		}
  		CommonOption logicalBeginOption = new CommonOption("[\u903b\u8f91\u5f00\u59cb]", "[\u903b\u8f91\u5f00\u59cb]");
  		fieldOptionMap.get("status_id").add(logicalBeginOption);
  		CommonOption logicalEndOption = new CommonOption("[\u903b\u8f91\u5173\u95ed]", "[\u903b\u8f91\u5173\u95ed]");
  		fieldOptionMap.get("status_id").add(logicalEndOption);
  
  		//ext fields
  		DataManager.getInstance().addExtFields(templateId, fieldMap, fieldOptionMap, das);
  
  		//\u67d0\u4e2a\u65f6\u95f4\u8303\u56f4\u5185\u505a\u7684\u52a8\u4f5c
  		CommonField actionTimeRangeField = new CommonField();
  		actionTimeRangeField.setId("action_time_range");
  		actionTimeRangeField.setName("\u52a8\u4f5c\u65f6\u95f4\u8303\u56f4");
  		actionTimeRangeField.setType("timestamp");
  		fieldMap.put("action_time_range",actionTimeRangeField);
  
  		//\u8be5\u8868\u5355\u5bf9\u5e94\u7684\u52a8\u4f5c
  		CommonField actionField = new CommonField();
  		actionField.setId("action_id");
  		actionField.setName("\u52a8\u4f5c");
  		actionField.setType("action_id");
  		fieldMap.put("action_id",actionField);
  		fieldOptionMap.put("action_id",new TreeSet<CommonOption>());
  		Template template = das.queryTemplate(templateId);
  		Flow flow = das.queryFlow(template.getFlowId());
  		Action[] actionsArray = flow.getActions();
  		for(Action action : actionsArray){
  			CommonOption option = new CommonOption(action.getId().toString(),action.getName());
  			fieldOptionMap.get("action_id").add(option);
  		}
  
  
  		//\u62fc\u88c5\u8fd4\u56de\u503c
  		StringBuffer mainTableHTML = new StringBuffer(64);
  		mainTableHTML.append("<table width=\"100%\">");
  
  		mainTableHTML.append("<tr>");
  
  		StringBuffer leftMainTableHTML = new StringBuffer(64);
  		leftMainTableHTML.append("<table id=\"table_left_main_").append(templateId).append("\" width=\"100%\">");
  
  		StringBuffer rightMainTableHTML = new StringBuffer(64);
  		rightMainTableHTML.append("<table id=\"table_right_main_").append(templateId).append("\" width=\"100%\">");
  
  		int index = 0;
  		for(String fieldId : fieldMap.keySet())
  		{
  			if(fieldId.equals("id"))
  				continue;
  
  			StringBuffer trHTML = new StringBuffer(64);
  
  			trHTML.append("<tr>");
  			trHTML.append("<td class=\"tdNoBottom\">");
  
  			CommonField field = fieldMap.get(fieldId);
  
  			if(field.getType().equals("status_id")
  					|| field.getType().equals("create_user")
  					|| field.getType().equals("assign_user")
  					|| field.getType().equals("action_id"))
  			{
  				trHTML.append(getWhereFieldBaseHTML(templateId + "_" + fieldId, field, fieldOptionMap.get(fieldId), (whereFieldMap == null ? null : whereFieldMap.get(fieldId))));
  			}
  			else if(field.getType().equals("selection")
  					|| field.getType().equals("reference")
  						|| field.getType().equals("attachment"))
  			{
  				trHTML.append(getWhereFieldSelectionHTML(templateId + "_" + fieldId, field, fieldOptionMap.get(fieldId), (whereFieldMap == null ? null : whereFieldMap.get(fieldId))));
  			}
  			else if(field.getType().equals("input")
  					|| field.getType().equals("timestamp"))
  			{
  				trHTML.append(getWhereFieldInputHTML(templateId + "_" + fieldId, field, (whereFieldMap == null ? null : whereFieldMap.get(fieldId))));
  			}
  
  			trHTML.append("</td>");
  			trHTML.append("</tr>");
  
  			if(index % 2 == 0)
  			{
  				leftMainTableHTML.append(trHTML);
  			}
  			else
  			{
  				rightMainTableHTML.append(trHTML);
  			}
  
  			index++;
  		}
  
  		leftMainTableHTML.append("</table>");
  		rightMainTableHTML.append("</table>");
  
  		mainTableHTML.append("<td class=\"tdNoBottom\">");
  		mainTableHTML.append(leftMainTableHTML);
  		mainTableHTML.append("</td>");
  
  		mainTableHTML.append("<td class=\"tdNoBottom\">");
  		mainTableHTML.append(rightMainTableHTML);
  		mainTableHTML.append("</td>");
  
  		mainTableHTML.append("</tr>");
  
  		mainTableHTML.append("<tr>");
  		mainTableHTML.append("<td class=\"tdNoBottom\" colspan=\"2\"><input id=\"input_display_").append(templateId).append("\" type=\"button\" onClick=\"displayArea('").append(templateId).append("')\" value=\"\u6253\u5f00\u663e\u793a\u8bbe\u7f6e\"/></td>");
  		mainTableHTML.append("</tr>");
  		mainTableHTML.append("<tr id=\"tr_display_").append(templateId).append("\" style=\"display:none\">");
  		mainTableHTML.append("<td id=\"td_display_").append(templateId).append("\" colspan=\"2\" class=\"tdNoBottom\">");
  		mainTableHTML.append(getDisplayFieldHTML("display_" + templateId, fieldMap, displayFieldMap));
  		mainTableHTML.append("</td>");
  		mainTableHTML.append("</tr>");
  
  		mainTableHTML.append("<tr>");
  		mainTableHTML.append("<td class=\"tdNoBottom\" colspan=\"2\"><input id=\"input_order_").append(templateId).append("\" type=\"button\" onClick=\"orderArea('").append(templateId).append("')\" value=\"\u6253\u5f00\u6392\u5e8f\u8bbe\u7f6e\"/></td>");
  		mainTableHTML.append("</tr>");
  		mainTableHTML.append("<tr id=\"tr_order_").append(templateId).append("\" style=\"display:none\">");
  		mainTableHTML.append("<td id=\"td_order_").append(templateId).append("\" colspan=\"2\" class=\"tdNoBottom\">");
  		mainTableHTML.append(getOrderFieldHTML("order_" + templateId, fieldMap, orderFieldMap, orderIndent));
  		mainTableHTML.append("</td>");
  		mainTableHTML.append("</tr>");
  
  		mainTableHTML.append("</table>");
  
  		return mainTableHTML.toString();
  	}
  
  
  	String getWhereFieldBaseHTML(String prefix, CommonField field, Set<CommonOption> optionSet, Set<Object> whereFieldSet)
  	{
  		String method = "";
  		String values = "";
  		boolean isAdvance = false;
  		boolean isAll = false;
  		
  		if(whereFieldSet != null)
  		{
  			for(Object obj : whereFieldSet)
  			{
  				if(obj instanceof String)
  				{
  					isAdvance = true;
  				}
  				else if(obj instanceof CommonField)
  				{
  					CommonField tempField = (CommonField)obj;
  					
  					method = tempField.getMethod();
  
  					if(tempField.getValue() != null && !tempField.getValue().trim().equals(""))
  					{
  						values += "[" + tempField.getValue().trim() + "]";
  					}
  					isAll = tempField.isAll();
  				}
  			}
  		}
  
  		if(isAll)
  		{
  			isAdvance = false;
  			values = "[[all]]";
  			method = "in";
  		}
  
  		if(method != null)
  		{
  			if(method.equals("="))
  			{
  				method = "in";
  			}
  			else if(method.equals("!="))
  			{
  				method = "not in";
  			}
  		}
  
  		StringBuffer strb = new StringBuffer(64);
  
  		strb.append("<div id=\"").append(prefix).append("_where\" fieldId=\"").append(field.getId()).append("\" fieldName=\"").append(field.getName()).append("\" type=\"selection\">");
  
  		strb.append("<table width=\"100%\">");
  
  		strb.append("<tr>");
  
  		strb.append("<td width=\"116px\" noWrap>").append(field.getName()).append(":<br>");
  		strb.append("<span id=\"").append(prefix).append("_span\" style=\"color:blue;cursor:pointer;width:70px\" onClick=\"changeOperateType_selection('").append(prefix).append("')\">");
  		strb.append(isAdvance ? "\u666e\u901a\u8bbe\u7f6e" : "\u9ad8\u7ea7\u8bbe\u7f6e");
  		strb.append("</span>");
  		strb.append("</td>");
  
  		strb.append("<td>");
  		strb.append("<select id=\"").append(prefix).append("_method\" style=\"width:8em\" onChange=\"setXMLResult('").append(prefix).append("',false)\">");
  		strb.append("<option></option>");
  		strb.append("<option value=\"in\"").append(method.equals("in") ? " selected" : "").append(">in</option>");
  		strb.append("<option value=\"not in\"").append(method.equals("not in") ? " selected" : "").append(">not in</option>");
  		if(field.getId().equals("assign_user") || field.getId().equals("log_create_user") )
  		{
  			strb.append("<option value=\"is null\"").append(method.equals("is null") ? " selected" : "").append(">is null</option>");
  			strb.append("<option value=\"is not null\"").append(method.equals("is not null")? " selected" : "").append(">is not null</option>");
  		}
  		strb.append("</select>");
  		strb.append("</td>");
  
  		strb.append("<td>");
  		strb.append("<select id=\"").append(prefix).append("_value\" style=\"width:16em;\" onChange=\"setXMLResult('").append(prefix).append("',false)\"").append(isAdvance ? " size=\"5\" multiple" : "").append(">");
  		strb.append("<option></option>");
  		if(optionSet != null)
  		{
  			for(CommonOption option : optionSet)
  			{
  				strb.append("<option value=\"").append(option.getId()).append("\"").append(values.indexOf("[" + option.getId() + "]") != -1 ? " selected" : "").append(">").append(XMLUtil.toSafeXMLString(option.getName())).append("</option>");
  			}
  		}
  		if(!isAdvance)
  			strb.append("<option value=\"[all]\"").append(values.indexOf("[[all]]") != -1 ? " selected" : "").append(">[all]</option>");
  		strb.append("</select>");
  		strb.append("</td>");
  
  		strb.append("</tr>");
  
  		strb.append("</table>");
  
  		strb.append("</div>");
  		return strb.toString();
  	}
  
  	protected String getWhereFieldInputAdvanceHTML(String prefix, CommonField field, Set<Object> whereFieldSet)
  	{
  		StringBuffer strb = new StringBuffer(64);
  
  		strb.append("<div id=\"").append(prefix).append("_where\" fieldId=\"").append(field.getId()).append("\" fieldName=\"").append(field.getName()).append("\" type=\"input\"");
  		if(field.getDataType() != null)
  			strb.append(" dataType=\"").append(field.getDataType()).append("\"");
  
  		StringBuffer tableBuffer = new StringBuffer(64);
  		tableBuffer.append("<table width=\"100%\">");
  
  		tableBuffer.append("<tr>");
  
  		tableBuffer.append("<td width=\"116px\" noWrap>").append(field.getName()).append(":<br>");
  		tableBuffer.append("<span id=\"").append(prefix).append("_span\" style=\"color:blue;cursor:pointer;width:70px\" onClick=\"changeOperateType('").append(prefix).append("',false)\">");
  		tableBuffer.append("\u666e\u901a\u8bbe\u7f6e");
  		tableBuffer.append("</span>");
  		tableBuffer.append("</td>");
  
  		StringBuffer values = new StringBuffer(64);
  		StringBuffer valuesForSetXMLResult = new StringBuffer();
  
  		StringBuffer initXml = new StringBuffer();
  
  		if(whereFieldSet != null)
  		{
  			for(Object whereObj : whereFieldSet)
  			{
  				if(whereObj instanceof CommonField)
  				{
  					CommonField whereField = (CommonField)whereObj;
  
  					if(values.length() > 0)
  						values.append(" ");
  					values.append(whereField.getName());
  					values.append(" ");
  					values.append(whereField.getMethod());
  					if(whereField.getValue() != null && whereField.getValue().length() > 0)
  					{
  						values.append(" ");
  						values.append(whereField.getValue());
  					}
  
  					if(valuesForSetXMLResult.length() > 0)
  						valuesForSetXMLResult.append("|");
  					valuesForSetXMLResult.append("param:").append(whereField.getName());
  					valuesForSetXMLResult.append("|");
  					valuesForSetXMLResult.append("method:").append(whereField.getMethod());
  					if(whereField.getValue() != null && whereField.getValue().length() > 0)
  					{
  						valuesForSetXMLResult.append("|");
  						valuesForSetXMLResult.append("value:").append(whereField.getValue());
  					}
  
  					initXml.append("<field id=\"").append(whereField.getId()).append("\"");
  					initXml.append(" name=\"").append(XMLUtil.toSafeXMLString(whereField.getName())).append("\"");
  					if(whereField.getType() != null)
  						initXml.append(" type=\"").append(whereField.getType()).append("\"");
  					if(whereField.getDataType() != null)
  						initXml.append(" dataType=\"").append(whereField.getDataType()).append("\"");
  					initXml.append(" method=\"").append(XMLUtil.toSafeXMLString(whereField.getMethod())).append("\"");
  					if(whereField.getValue() == null)
  						initXml.append("/>");
  					else
  						initXml.append(">").append(XMLUtil.toSafeXMLString(whereField.getValue())).append("</field>");
  				}
  				else if(whereObj instanceof String)
  				{
  					if(values.length() > 0)
  						values.append(" ");
  					values.append((String)whereObj);
  
  					if(valuesForSetXMLResult.length() > 0)
  						valuesForSetXMLResult.append("|");
  					valuesForSetXMLResult.append("condition:").append((String)whereObj);
  
  					initXml.append("<condition>").append((String)whereObj).append("</condition>");
  				}
  			}
  		}
  
  		tableBuffer.append("<td>");
  		tableBuffer.append(XMLUtil.toSafeXMLString(values.toString()));
  		tableBuffer.append("</td>");
  
  		tableBuffer.append("<td>");
  		tableBuffer.append("<span id=\"").append(prefix).append("_span\" style=\"color:blue;cursor:pointer;width:35px\" onclick=\"editAdvance_input('").append(prefix).append("')\">");
  		tableBuffer.append("\u7f16\u8f91");
  		tableBuffer.append("</span>");
  		tableBuffer.append("</td>");
  
  		tableBuffer.append("</tr>");
  
  		tableBuffer.append("</table>");
  
  		if(valuesForSetXMLResult.length() > 0)
  			strb.append(" valuesForXml=\"").append(XMLUtil.toSafeXMLString(valuesForSetXMLResult.toString())).append("\"");
  
  		if(initXml.length() > 0)
  			strb.append(" xml=\"").append(XMLUtil.toSafeXMLString(initXml.toString())).append("\"");
  
  		strb.append(">");
  
  		strb.append(tableBuffer);
  
  		strb.append("</div>");
  
  		return strb.toString();
  	}
  
  	protected String getWhereFieldInputHTML(String prefix, CommonField field, Set<Object> whereFieldSet)
  	{
  		if(whereFieldSet != null && whereFieldSet.size() > 1)
  		{
  			return getWhereFieldInputAdvanceHTML(prefix, field, whereFieldSet);
  		}
  
  		String method = "";
  		String value = "";
  
  		if(whereFieldSet == null || whereFieldSet.size() == 0)
  		{
  			if(field.getId().equals("create_time") || field.getId().equals("last_modify_time")||field.getId().equals("action_time_range"))
  			{
  				value = "2013-01-01 00:00:00";
  			}
  		}
  		else
  		{
  			CommonField tempField = (CommonField)whereFieldSet.iterator().next();
  			if(tempField.getMethod() != null)
  				method = tempField.getMethod().trim();
  			if(tempField.getValue() != null)
  				value = tempField.getValue().trim();
  		}
  
  		StringBuffer strb = new StringBuffer(64);
  
  		strb.append("<div id=\"").append(prefix).append("_where\" fieldId=\"").append(field.getId()).append("\" fieldName=\"").append(field.getName()).append("\" type=\"input\"");
  		if(field.getDataType() != null)
  			strb.append(" dataType=\"").append(field.getDataType()).append("\"");
  		strb.append(">");
  
  		strb.append("<table width=\"100%\">");
  
  		strb.append("<tr>");
  
  		strb.append("<td width=\"116px\" noWrap>").append(field.getName()).append(":<br>");
  		strb.append("<span id=\"").append(prefix).append("_span\" style=\"color:blue;cursor:pointer;width:70px\" onClick=\"changeOperateType('").append(prefix).append("',true)\">");
  		strb.append("\u9ad8\u7ea7\u8bbe\u7f6e");
  		strb.append("</span>");
  		strb.append("</td>");
  
  		strb.append("<td>");
  		strb.append("<select id=\"").append(prefix).append("_method\" style=\"width:8em\" onChange=\"setXMLResult('").append(prefix).append("', false)\">");
  		strb.append("<option></option>");
  		strb.append("<option value=\"=\"").append(method.equals("=") ? " selected" : "").append(">=</option>");
  		strb.append("<option value=\"!=\"").append(method.equals("!=") ? " selected" : "").append(">!=</option>");
  		if(field.getId().equals("id"))
  			;
  		else if(field.getId().equals("create_time") || field.getId().equals("last_modify_time")||field.getId().equals("action_time_range")
  				|| field.getDataType() != null && (field.getDataType().equals("integer")
  						|| field.getDataType().equals("float")
  						|| field.getDataType().equals("long")
  						|| field.getDataType().equals("double")
  						|| field.getDataType().equals("timestamp")))
  		{
  			strb.append("<option value=\"&gt;\"").append(method.equals(">") ? " selected" : "").append(">&gt;</option>");
  			strb.append("<option value=\"&gt;=\"").append(method.equals(">=") ? " selected" : "").append(">&gt;=</option>");
  			strb.append("<option value=\"&lt;\"").append(method.equals("<") ? " selected" : "").append(">&lt;</option>");
  			strb.append("<option value=\"&lt;=\"").append(method.equals("<=") ? " selected" : "").append(">&lt;=</option>");
  		}
  		else
  		{
  			strb.append("<option value=\"like\"").append(method.equals("like") ? " selected" : "").append(">like</option>");
  			strb.append("<option value=\"not like\"").append(method.equals("not like") ? " selected" : "").append(">not like</option>");
  		}
  
  		if(!field.getId().equals("id") && !field.getId().equals("title")
  				&& !field.getId().equals("create_time") && !field.getId().equals("last_modify_time")&&!field.getId().equals("action_time_range"))
  		{
  			strb.append("<option value=\"is null\"").append(method.equals("is null") ? " selected" : "").append(">is null</option>");
  			strb.append("<option value=\"is not null\"").append(method.equals("is not null") ? " selected" : "").append(">is not null</option>");
  		}
  		strb.append("</select>");
  		strb.append("</td>");
  
  		strb.append("<td>");
  		strb.append("<input id=\"").append(prefix).append("_value\" type=\"text\" size=\"29\" value=\"").append(XMLUtil.toSafeXMLString(value)).append("\" onblur=\"setXMLResult('").append(prefix).append("',false)\"");
  		if(field.getId().equals("id") || field.getDataType() != null
  				&& (field.getDataType().equals("integer")
  						|| field.getDataType().equals("float")
  						|| field.getDataType().equals("long")
  						|| field.getDataType().equals("double")))
  		{
  			strb.append(" onkeydown=\"return checkIsInputNum(event);\"");
  		}
  		strb.append("/>");
  
  		// \u65f6\u95f4\u5b57\u6bb5
  		if( "create_time".equals( field.getId() ) || "last_modify_time".equals( field.getId()) || "action_time_range".equals( field.getId()) || ( field.getDataType() != null && "timestamp".equals( field.getDataType() ) ) )
  			strb.append("<img onclick=\"WdatePicker({el:'"+prefix+"_value',errDealMode:2,dateFmt:'yyyy-MM-dd HH:mm:ss'})\" src=\"/lib/My97DatePicker/skin/datePicker.gif\" width=\"16\" height=\"22\" align=\"absmiddle\" >");
  			//strb.append( "<img onClick=\"displayCalendar( '" + prefix + "', event );event.cancelBubble=true;return false;\" src=\"/images/xinjian.gif\"/>" );
  
  		strb.append("</td>");
  
  		strb.append("</tr>");
  
  		strb.append("</table>");
  
  		strb.append("</div>");
  
  		return strb.toString();
  	}
  
  	protected String getWhereFieldSelectionHTML(String prefix, CommonField field, Set<CommonOption> optionSet, Set<Object> whereFieldSet)
  	{
  		String method = "";
  		String values = "";
  		String condition = "";
  		boolean isAdvance = false;
  		boolean isAll = false;
  
  		if(whereFieldSet != null)
  		{
  			for(Object obj : whereFieldSet)
  			{
  				if(obj instanceof String)
  				{
  					String tempCondition = (String)obj;
  					if(tempCondition.equals("and") || tempCondition.equals("or"))
  					{
  						condition = tempCondition;
  					}
  
  					isAdvance = true;
  				}
  				else if(obj instanceof CommonField)
  				{
  					CommonField tempField = (CommonField)obj;
  
  					method = tempField.getMethod();
  
  					String[] valueArray = new String[0];
  					if(tempField.getValue() != null && !tempField.getValue().trim().equals(""))
  					{
  						valueArray = tempField.getValue().trim().split("\\,");
  					}
  
  					for(String value : valueArray)
  					{
  						values += "[" + value + "]";
  					}
  
  					if(valueArray.length > 1)
  					{
  						isAdvance = true;
  					}
  
  					isAll = tempField.isAll();
  				}
  			}
  		}
  
  		if(isAll)
  		{
  			isAdvance = false;
  			values = "[[all]]";
  		}
  
  		if(condition.equals("and"))
  		{
  			if(method.equals("like"))
  			{
  				method = "=";
  			}
  			else if(method.equals("not like"))
  			{
  				method = "!=";
  			}
  		}
  
  		StringBuffer strb = new StringBuffer(64);
  
  		strb.append("<div id=\"").append(prefix).append("_where\"");
  		strb.append(" fieldId=\"").append(field.getId()).append("\"");
  		strb.append(" fieldName=\"").append(field.getName()).append("\"");
  		strb.append(" type=\"").append(field.getType()).append("\"");
  		if(field.getDataType() != null)
  			strb.append(" dataType=\"").append(field.getDataType()).append("\"");
  		strb.append(">");
  
  		strb.append("<table width=\"100%\">");
  
  		strb.append("<tr>");
  
  		strb.append("<td width=\"116px\" noWrap>").append(field.getName()).append(":<br>");
  		strb.append("<span id=\"").append(prefix).append("_span\" style=\"color:blue;cursor:pointer;width:70px\" onClick=\"changeOperateType_selection('").append(prefix).append("')\">");
  		strb.append(isAdvance ? "\u666e\u901a\u8bbe\u7f6e" : "\u9ad8\u7ea7\u8bbe\u7f6e");
  		strb.append("</span>");
  		strb.append("</td>");
  
  		strb.append("<td>");
  		strb.append("<select id=\"").append(prefix).append("_method\" style=\"width:8em\" onChange=\"setXMLResult('").append(prefix).append("',false)\">");
  		strb.append("<option></option>");
  		if(field.getDataType() != null && (field.getDataType().equals("multiple") || field.getDataType().equals("file")))
  		{
  			if(isAll)
  			{
  				method = "=";
  			}
  
  			strb.append("<option value=\"=\"").append(method.equals("=") ? " selected" : "").append(">=</option>");
  			strb.append("<option value=\"!=\"").append(method.equals("!=") ? " selected" : "").append(">!=</option>");
  			strb.append("<option value=\"like\"").append(method.equals("like") ? " selected" : "").append(">like</option>");
  			strb.append("<option value=\"not like\"").append(method.equals("not like") ? " selected" : "").append(">not like</option>");
  		}
  		else
  		{
  			if(isAll)
  			{
  				method = "in";
  			}
  
  			strb.append("<option value=\"in\"").append(method.equals("in") ? " selected" : "").append(">in</option>");
  			strb.append("<option value=\"not in\"").append(method.equals("not in") ? " selected" : "").append(">not in</option>");
  		}
  		strb.append("<option value=\"is null\"").append(method.equals("is null") ? " selected" : "").append(">is null</option>");
  		strb.append("<option value=\"is not null\"").append(method.equals("is not null") ? " selected" : "").append(">is not null</option>");
  		strb.append("</select>");
  		strb.append("</td>");
  
  
  		strb.append("<td>");
  		strb.append("<select id=\"").append(prefix).append("_value\" style=\"width:16em;\" onChange=\"setXMLResult('").append(prefix).append("',false)\"").append(isAdvance ? " size=\"5\" multiple" : "").append(">");
  		strb.append("<option></option>");
  		if(optionSet != null)
  		{
  			for(CommonOption option : optionSet)
  			{
  				strb.append("<option value=\"").append(option.getId()).append("\"").append(values.indexOf("[" + option.getId() + "]") != -1 ? " selected" : "").append(">").append(XMLUtil.toSafeXMLString(option.getName())).append("</option>");
  			}
  		}
  		if(!isAdvance)
  			strb.append("<option value=\"[all]\"").append(values.indexOf("[[all]]") != -1 ? " selected" : "").append(">[all]</option>");
  		strb.append("</select>");
  		strb.append("</td>");
  
  		strb.append("</tr>");
  
  		strb.append("</table>");
  
  		strb.append("</div>");
  
  		return strb.toString();
  	}
  
  	protected String getDisplayFieldHTML(String prefix, Map<String, CommonField> allFieldMap, Map<String, CommonField> selectedFieldMap)
  	{
  		StringBuffer strb = new StringBuffer(64);
  
  		strb.append("<div id=\"").append(prefix).append("_display\" width=\"100%\" height=\"100%\">");
  
  		strb.append("<table width=\"10%\">");
  
  		strb.append("<tr>");
  
  		//deal with all fields
  		strb.append("<td class=\"tdNoBottom\">");
  		strb.append("<select id=\"").append(prefix).append("_restDisplaySelect\" size=\"10\" style=\"width:20em\" multiple>");
  		if(allFieldMap != null)
  		{
  			for(String fieldId : allFieldMap.keySet())
  			{
  				if(selectedFieldMap != null && selectedFieldMap.containsKey(fieldId))
  				{
  					continue;
  				}
  
  				CommonField field = allFieldMap.get(fieldId);
  
  				strb.append("<option value=\"").append(fieldId).append("\"");
  				strb.append(" type=\"").append(field.getType()).append("\"");
  				if(field.getDataType() != null)
  				{
  					strb.append(" dataType=\"").append(field.getDataType()).append("\"");
  				}
  				strb.append(">");
  				strb.append(XMLUtil.toSafeXMLString(field.getName()));
  				strb.append("</option>");
  			}
  		}
  		strb.append("</select>");
  		strb.append("</td>");
  
  		//deal with operate buttons
  		strb.append("<td class=\"tdNoBottom\">");
  		strb.append("<table width=\"100%\">");
  		strb.append("<tr>");
  		strb.append("<td align=\"center\" class=\"tdNoBottom\">");
  		strb.append("<input type=\"button\" value=\"\u6dfb    \u52a0\" onclick=\"moveOptions('").append(prefix).append("_restDisplaySelect','").append(prefix).append("_selectedDisplaySelect')\"/>");
  		strb.append("</td>");
  		strb.append("</tr>");
  		strb.append("<tr>");
  		strb.append("<td align=\"center\" class=\"tdNoBottom\">");
  		strb.append("<input type=\"button\" value=\"\u79fb    \u9664\" onclick=\"moveOptions('").append(prefix).append("_selectedDisplaySelect','").append(prefix).append("_restDisplaySelect')\"/>");
  		strb.append("</td>");
  		strb.append("</tr>");
  		strb.append("</table>");
  		strb.append("</td>");
  
  		//deal with selected fields
  		strb.append("<td class=\"tdNoBottom\">");
  		strb.append("<select id=\"").append(prefix).append("_selectedDisplaySelect\" size=\"10\" style=\"width:20em\" onchange=\"checkHold('").append(prefix).append("_selectedDisplaySelect')\" multiple>");
  		if(selectedFieldMap != null)
  		{
  			for(String fieldId : selectedFieldMap.keySet())
  			{
  				CommonField field = selectedFieldMap.get(fieldId);
  
  				strb.append("<option value=\"").append(fieldId).append("\"");
  				strb.append(" type=\"").append(field.getType()).append("\"");
  				if(field.getDataType() != null)
  				{
  					strb.append(" dataType=\"").append(field.getDataType()).append("\"");
  				}
  				strb.append(">");
  				strb.append(XMLUtil.toSafeXMLString(field.getName()));
  				strb.append("</option>");
  			}
  		}
  		strb.append("</select>");
  		strb.append("</td>");
  
  		//deal with control buttons
  		strb.append("<td class=\"tdNoBottom\">");
  		strb.append("<table width=\"100%\">");
  		strb.append("<tr>");
  		strb.append("<td align=\"center\" class=\"tdNoBottom\">");
  		strb.append("<input type=\"button\" value=\"\u4e0a    \u79fb\" onclick=\"executeControl('").append(prefix).append("_selectedDisplaySelect',true)\"/>");
  		strb.append("</td>");
  		strb.append("</tr>");
  		strb.append("<tr>");
  		strb.append("<td align=\"center\" class=\"tdNoBottom\">");
  		strb.append("<input type=\"button\" value=\"\u4e0b    \u79fb\" onclick=\"executeControl('").append(prefix).append("_selectedDisplaySelect',false)\"/>");
  		strb.append("</td>");
  		strb.append("</tr>");
  		strb.append("<tr>");
  		strb.append("<td align=\"center\" class=\"tdNoBottom\">");
  		strb.append("<input type=\"button\" value=\"\u9884    \u89c8\" onclick=\"previewDisplay('").append(prefix).append("_selectedDisplaySelect')\"/>");
  		strb.append("</td>");
  		strb.append("</tr>");
  		strb.append("</table>");
  		strb.append("</td>");
  
  		strb.append("</tr>");
  
  		strb.append("</table>");
  
  		strb.append("</div>");
  
  		return strb.toString();
  	}
  
  	protected String getOrderFieldHTML(String prefix, Map<String, CommonField> allFieldMap, Map<String, CommonField> selectedFieldMap, int indent)
  	{
  		StringBuffer strb = new StringBuffer(64);
  
  		strb.append("<div id=\"").append(prefix).append("_order\" width=\"100%\" height=\"100%\">");
  
  		strb.append("<table width=\"100%\">");
  
  		strb.append("<tr>");
  
  		//deal with rest fields
  		strb.append("<td class=\"tdNoBottom\">");
  		strb.append("<select class=\"noSearch\" id=\"").append(prefix).append("_restOrderSelect\" size=\"10\" style=\"width:20em\" multiple>");
  		if(allFieldMap != null)
  		{
  			for(String fieldId : allFieldMap.keySet())
  			{
  				if(selectedFieldMap != null && selectedFieldMap.containsKey(fieldId))
  				{
  					continue;
  				}
  
  				CommonField field = allFieldMap.get(fieldId);
  
  				strb.append("<option value=\"").append(fieldId).append("\"");
  				strb.append(" type=\"").append(field.getType()).append("\"");
  				if(field.getDataType() != null)
  				{
  					strb.append(" dataType=\"").append(field.getDataType()).append("\"");
  				}
  				strb.append(">");
  				strb.append(XMLUtil.toSafeXMLString(field.getName()));
  				strb.append("</option>");
  			}
  		}
  		strb.append("</select>");
  		strb.append("</td>");
  
  		//deal with operate buttons
  		strb.append("<td class=\"tdNoBottom\">");
  		strb.append("<table width=\"100%\" cellpadding='5'>");
  		strb.append("<tr>");
  		strb.append("<td align=\"center\" class=\"tdNoBottom\">");
  		strb.append("<input type=\"button\" class=\"btn btn-primary\" value=\"\u5347\u5e8f\u6dfb\u52a0\" onclick=\"orderOperation('").append(prefix).append("_restOrderSelect','").append(prefix).append("_selectedOrderSelect',1)\"/>");
  		strb.append("</td>");
  		strb.append("</tr>");
  		strb.append("<tr>");
  		strb.append("<td align=\"center\" class=\"tdNoBottom\">");
  		strb.append("<input type=\"button\" class=\"btn btn-primary\" value=\"\u964d\u5e8f\u6dfb\u52a0\" onclick=\"orderOperation('").append(prefix).append("_restOrderSelect','").append(prefix).append("_selectedOrderSelect',2)\"/>");
  		strb.append("</td>");
  		strb.append("</tr>");
  		strb.append("<tr>");
  		strb.append("<td align=\"center\" class=\"tdNoBottom\">");
  		strb.append("<input type=\"button\" class=\"btn btn-danger\" value=\"\u79fb    \u9664\" onclick=\"orderOperation('").append(prefix).append("_selectedOrderSelect','").append(prefix).append("_restOrderSelect',3)\"/>");
  		strb.append("</td>");
  		strb.append("</tr>");
  		strb.append("</table>");
  		strb.append("</td>");
  
  		//deal with selected fields
  		strb.append("<td class=\"tdNoBottom\">");
  		strb.append("<select class=\"noSearch\" id=\"").append(prefix).append("_selectedOrderSelect\" size=\"10\" style=\"width:20em\" multiple>");
  		if(selectedFieldMap != null)
  		{
  			for(String fieldId : selectedFieldMap.keySet())
  			{
  				CommonField field = selectedFieldMap.get(fieldId);
  
  				strb.append("<option value=\"").append(fieldId).append("\"");
  				strb.append(" type=\"").append(field.getType()).append("\"");
  				if(field.getDataType() != null)
  				{
  					strb.append(" dataType=\"").append(field.getDataType()).append("\"");
  				}
  				strb.append(" desc=\"" + field.isDesc() + "\">");
  				strb.append(XMLUtil.toSafeXMLString(field.getName())).append("(").append(field.isDesc() ? "\u964d\u5e8f" : "\u5347\u5e8f").append(")");
  				strb.append("</option>");
  			}
  		}
  		strb.append("</select>");
  		strb.append("</td>");
  
  		//deal with control buttons
  		strb.append("<td class=\"tdNoBottom\">");
  		strb.append("<table width=\"100%\" cellpadding='5'>");
  		strb.append("<tr>");
  		strb.append("<td align=\"center\" class=\"tdNoBottom\" colspan=\"1\">");
  		strb.append("<input type=\"button\" class=\"btn\" value=\"\u4e0a    \u79fb\" onclick=\"orderMove('").append(prefix).append("_selectedOrderSelect',true)\"/>");
  		strb.append("</td>");
  		strb.append("</tr>");
  		strb.append("<tr>");
  		strb.append("<td align=\"center\" class=\"tdNoBottom\" colspan=\"1\">");
  		strb.append("<input type=\"button\" class=\"btn\" value=\"\u4e0b    \u79fb\" onclick=\"orderMove('").append(prefix).append("_selectedOrderSelect',false)\"/>");
  		strb.append("</td>");
  		strb.append("</tr>");
  		strb.append("<tr>");
  		strb.append("<td align=\"center\" class=\"tdNoBottom\">");
  		strb.append("\u5206\u7ec4\u5b57\u6bb5\u6570\uff1a");
  		strb.append("</td>");
  		strb.append("</tr>");
  		strb.append("<tr>");
  		strb.append("<td align=\"center\" class=\"tdNoBottom\">");
  		strb.append("<input id=\"").append(prefix).append("_group\" style='width:50px;' value=\"").append(indent).append("\"/>");
  		strb.append("</td>");
  		strb.append("</tr>");
  		strb.append("</table>");
  		strb.append("</td>");
  
  		strb.append("</tr>");
  
  		strb.append("</table>");
  
  		strb.append("</div>");
  
  		return strb.toString();
  	}
  
  	protected Map<String, Set<Object>> getWhereFieldMap(Node whereNode)
  	{
  		
  		Map<String, Set<Object>> whereFieldMap = new LinkedHashMap<String, Set<Object>>();
  		List<Node> fieldNodeList = new LinkedList<Node>();
  		for(int i = 0; i < whereNode.getChildNodes().getLength(); i++)
  		{
  			Node fieldNode = whereNode.getChildNodes().item(i);
  			if(fieldNode.getNodeName().equals("field") || fieldNode.getNodeName().equals("condition"))
  			{
  				fieldNodeList.add(fieldNode);
  			}
  		}
  
  		for(int i = 0; i < fieldNodeList.size(); i++)
  		{
  			
  			Node fieldNode = fieldNodeList.get(i);
  
  			if(fieldNode.getNodeName().equals("field"))
  			{
  				Set<Object> objSet = new LinkedHashSet<Object>();
  
  				objSet.add(getCommonField(fieldNode));
  				whereFieldMap.put(XMLUtil.getAttribute(fieldNode, "id"), objSet);
  			}
  			else if(fieldNode.getNodeName().equals("condition") && fieldNode.getTextContent().equals("("))
  			{
  				Set<Object> objSet = new LinkedHashSet<Object>();
  				objSet.add("(");
  
  				//\u662f\u4e00\u4e2a\u62ec\u53f7\uff0c\u5219\u9700\u8981\u626b\u63cf\u4e00\u904d\uff0c\u68c0\u67e5\u662f\u591a\u9009\u6216\u8005\u662f\u5355\u9009\u6216\u8005\u662f\u9ad8\u7ea7\u641c\u7d22
  				i++;
  				if(i == fieldNodeList.size())
  					return null;
  
  				fieldNode = fieldNodeList.get(i);
  				String fieldId = XMLUtil.getAttribute(fieldNode, "id");
  				String dataType = XMLUtil.getAttribute(fieldNode, "dataType");
  				
  				//\u521b\u5efa\u4eba\uff0c\u6307\u6d3e\u4eba\uff0c\u6307\u6d3e\u7c7b\u578b\uff0c\u6216\u8005\u662f\u591a\u9009\u7684selection\u6216\u8005reference
  				if(fieldNode.getNodeName().equals("field")
  						&& (fieldId.equals("create_user") || fieldId.equals("assign_user") || fieldId.equals("log_create_user")
  								|| fieldId.equals("assign_type") || fieldId.equals("status_id")
  								|| dataType != null && (dataType.equals("multiple") || dataType.equals("file"))))
  				{
  					//\u4e00\u76f4\u627e\u5230\u4e0b\u4e00\u4e2a\u53f3\u62ec\u53f7\u4e3a\u6b62
  					for(int j = i; j < fieldNodeList.size(); j++)
  					{
  						fieldNode = fieldNodeList.get(j);
  
  						if(fieldNode.getNodeName().equals("field"))
  						{
  							objSet.add(getCommonField(fieldNode));
  						}
  						else if(fieldNode.getTextContent().equals("and") || fieldNode.getTextContent().equals("or"))
  						{
  							objSet.add(fieldNode.getTextContent());
  						}
  						else if(fieldNode.getTextContent().equals(")"))
  						{
  							objSet.add(")");
  							whereFieldMap.put(fieldId, objSet);
  
  							i = j;
  							break;
  						}
  					}
  				}
  				else
  				{
  					// \u662finput\u7684\u9ad8\u7ea7\u641c\u7d22
  					// \u8bb0\u7b97\u62ec\u53f7\u6570\u91cf\uff0c\u4ee5\u6b64\u6765\u5339\u914d
  					int bracketNum = 1;
  
  					//\u83b7\u53d6\u57dfID
  					for(int j = i; j < fieldNodeList.size(); j++)
  					{
  						fieldNode = fieldNodeList.get(j);
  
  						if(fieldNode.getNodeName().equals("field"))
  						{
  							objSet.add(getCommonField(fieldNode));
  						}
  						else
  						{
  							objSet.add(fieldNode.getTextContent());
  						}
  
  						if(fieldNode.getNodeName().equals("field"))
  							continue;
  
  						if(fieldNode.getTextContent().equals(")"))
  							bracketNum--;
  						else if(fieldNode.getTextContent().equals("("))
  							bracketNum++;
  
  						if(bracketNum == 0)
  						{
  							i = j;
  							break;
  						}
  					}
  
  					whereFieldMap.put(fieldId, objSet);
  				}
  			}
  		}
  
  		return whereFieldMap;
  	}
  
  	protected Map<String, CommonField> getDisplayFieldMap(Node displayNode)
  	{
  		Map<String, CommonField> displayFieldMap = new LinkedHashMap<String, CommonField>();
  
  		List<Node> fieldNodeList = XMLUtil.getNodes(displayNode, "field");
  		for(Node fieldNode : fieldNodeList)
  		{
  			CommonField field = getCommonField(fieldNode);
  			displayFieldMap.put(field.getId(), field);
  		}
  
  		return displayFieldMap;
  	}
  
  	protected Map<String, CommonField> getOrderFieldMap(Node orderNode)
  	{
  		Map<String, CommonField> orderFieldMap = new LinkedHashMap<String, CommonField>();
  
  		List<Node> fieldNodeList = XMLUtil.getNodes(orderNode, "field");
  		for(Node fieldNode : fieldNodeList)
  		{
  			CommonField field = getCommonField(fieldNode);
  			orderFieldMap.put(field.getId(), field);
  		}
  
  		return orderFieldMap;
  	}
  
  	private CommonField getCommonField(Node fieldNode)
  	{
  		CommonField field = new CommonField();
  
  		field.setId(XMLUtil.getAttribute(fieldNode, "id").trim());
  		field.setName(XMLUtil.getAttribute(fieldNode, "name").trim());
  		String type = XMLUtil.getAttribute(fieldNode, "type");
  		if(type != null)
  			field.setType(type.trim());
  		String dataType = XMLUtil.getAttribute(fieldNode, "dataType");
  		if(dataType != null)
  			field.setDataType(dataType.trim());
  		String method = XMLUtil.getAttribute(fieldNode, "method");
  		if(method != null)
  			field.setMethod(method.trim());
  		field.setValue(fieldNode.getTextContent().trim());
  		boolean isAll = false;
  		String isAllStr = XMLUtil.getAttribute(fieldNode, "isAll");
  		if(isAllStr != null)
  			isAll = Boolean.parseBoolean(isAllStr.trim());
  		field.setAll(isAll);
  		boolean desc = false;
  		String descStr = XMLUtil.getAttribute(fieldNode, "desc");
  		if(descStr != null)
  			desc = Boolean.parseBoolean(descStr);
  		field.setDesc(desc);
  
  		if(field.getName().equals("title"))
  			field.setName("\u6807\u9898");
  		else if(field.getName().equals("description"))
  			field.setName("\u63cf\u8ff0");
  		else if(field.getName().equals("create_user"))
  			field.setName("\u521b\u5efa\u4eba");
  		else if(field.getName().equals("create_time"))
  			field.setName("\u521b\u5efa\u65f6\u95f4");
  		else if(field.getName().equals("assign_user"))
  			field.setName("\u6307\u6d3e\u4eba");
  		else if(field.getName().equals("last_modify_time"))
  			field.setName("\u4fee\u6539\u65f6\u95f4");
  		else if(field.getName().equals("status_id"))
  			field.setName("\u72b6\u6001");
  
  		return field;
  	}
  
  
  	protected String[] queryFlowUsersByTemplateId(DataAccessSession das,UUID templateId){
  		Template template = das.queryTemplate(templateId);
  		Flow flow = das.queryFlow(template.getFlowId());
  		String[] users = flow.queryNodeUsers(template.getId());
  		return users;
  	}
  
  public void
  _jspService(javax.servlet.http.HttpServletRequest request,
              javax.servlet.http.HttpServletResponse response)
    throws java.io.IOException, javax.servlet.ServletException
  {
    javax.servlet.http.HttpSession session = request.getSession(true);
    com.caucho.server.webapp.WebApp _jsp_application = _caucho_getApplication();
    javax.servlet.ServletContext application = _jsp_application;
    com.caucho.jsp.PageContextImpl pageContext = _jsp_application.getJspApplicationContext().allocatePageContext(this, _jsp_application, request, response, null, session, 8192, true, false);
    javax.servlet.jsp.PageContext _jsp_parentContext = pageContext;
    javax.servlet.jsp.JspWriter out = pageContext.getOut();
    final javax.el.ELContext _jsp_env = pageContext.getELContext();
    javax.servlet.ServletConfig config = getServletConfig();
    javax.servlet.Servlet page = this;
    response.setContentType("text/xml; charset=UTF-8");
    request.setCharacterEncoding("UTF-8");
    try {
      out.write(_jsp_string0, 0, _jsp_string0.length);
      
	out.clear();
	
	Key key = (Key)session.getAttribute("key");
	Long keyId = (Long)session.getAttribute("kid");
	
	if(keyId == null || keyId <= 0 || key == null){
		response.sendRedirect(ConfigUtil.getCynthiaWebRoot());
		return;
	}
	
	DataAccessSession das = DataAccessFactory.getInstance().createDataAccessSession(key.getUsername(), keyId);
	
	String templateIdStr = request.getParameter("templateId");
	String fieldIdStr = request.getParameter("fieldId");
	if(templateIdStr==null||fieldIdStr==null)
	{
		response.sendRedirect(ConfigUtil.getCynthiaWebRoot());
		return;
	}
	
	StringBuffer xmlb = new StringBuffer(64);
	xmlb.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
	xmlb.append("<root>");
	xmlb.append("<isError>false</isError>");
	xmlb.append("</root>");

	Document doc = XMLUtil.string2Document(xmlb.toString(), "UTF-8");
	
	Node rootNode = XMLUtil.getSingleNode(doc, "root");
	
	Node fieldNode = doc.createElement("field");
	rootNode.appendChild(fieldNode);
		
	UUID templateId = DataAccessFactory.getInstance().createUUID(templateIdStr);
	String content = queryFieldHTML(das, templateId,fieldIdStr, null, null, null, 0);

	if(content != null)
		fieldNode.setTextContent(content);
		
	out.clear();
	out.println(XMLUtil.document2String(doc, "UTF-8"));

    } catch (java.lang.Throwable _jsp_e) {
      pageContext.handlePageException(_jsp_e);
    } finally {
      _jsp_application.getJspApplicationContext().freePageContext(pageContext);
    }
  }

  private java.util.ArrayList _caucho_depends = new java.util.ArrayList();

  public java.util.ArrayList _caucho_getDependList()
  {
    return _caucho_depends;
  }

  public void _caucho_addDepend(com.caucho.vfs.PersistentDependency depend)
  {
    super._caucho_addDepend(depend);
    com.caucho.jsp.JavaPage.addDepend(_caucho_depends, depend);
  }

  public boolean _caucho_isModified()
  {
    if (_caucho_isDead)
      return true;
    if (com.caucho.server.util.CauchoSystem.getVersionId() != 7170261747151080670L)
      return true;
    for (int i = _caucho_depends.size() - 1; i >= 0; i--) {
      com.caucho.vfs.Dependency depend;
      depend = (com.caucho.vfs.Dependency) _caucho_depends.get(i);
      if (depend.isModified())
        return true;
    }
    return false;
  }

  public long _caucho_lastModified()
  {
    return 0;
  }

  public java.util.HashMap<String,java.lang.reflect.Method> _caucho_getFunctionMap()
  {
    return _jsp_functionMap;
  }

  public void init(ServletConfig config)
    throws ServletException
  {
    com.caucho.server.webapp.WebApp webApp
      = (com.caucho.server.webapp.WebApp) config.getServletContext();
    super.init(config);
    com.caucho.jsp.TaglibManager manager = webApp.getJspApplicationContext().getTaglibManager();
    com.caucho.jsp.PageContextImpl pageContext = new com.caucho.jsp.PageContextImpl(webApp, this);
  }

  public void destroy()
  {
      _caucho_isDead = true;
      super.destroy();
  }

  public void init(com.caucho.vfs.Path appDir)
    throws javax.servlet.ServletException
  {
    com.caucho.vfs.Path resinHome = com.caucho.server.util.CauchoSystem.getResinHome();
    com.caucho.vfs.MergePath mergePath = new com.caucho.vfs.MergePath();
    mergePath.addMergePath(appDir);
    mergePath.addMergePath(resinHome);
    com.caucho.loader.DynamicClassLoader loader;
    loader = (com.caucho.loader.DynamicClassLoader) getClass().getClassLoader();
    String resourcePath = loader.getResourcePathSpecificFirst();
    mergePath.addClassPath(resourcePath);
    com.caucho.vfs.Depend depend;
    depend = new com.caucho.vfs.Depend(appDir.lookup("filterManage/addField.jsp"), 6587955625532863758L, false);
    com.caucho.jsp.JavaPage.addDepend(_caucho_depends, depend);
    depend = new com.caucho.vfs.Depend(appDir.lookup("filterManage/initMain.function.jsp"), -8292629403226425898L, false);
    com.caucho.jsp.JavaPage.addDepend(_caucho_depends, depend);
  }

  private final static char []_jsp_string0;
  static {
    _jsp_string0 = "\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n".toCharArray();
  }
}
