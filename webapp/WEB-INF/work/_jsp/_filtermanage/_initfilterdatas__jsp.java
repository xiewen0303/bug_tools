/*
 * JSP generated by Resin-3.1.12 (built Mon, 29 Aug 2011 03:22:08 PDT)
 */

package _jsp._filtermanage;
import javax.servlet.*;
import javax.servlet.jsp.*;
import javax.servlet.http.*;
import com.sogou.qadev.service.cynthia.util.XMLUtil;
import com.sogou.qadev.service.cynthia.dao.FilterAccessSessionMySQL;
import java.sql.Timestamp;
import com.sogou.qadev.service.cynthia.util.ConfigUtil;
import com.sogou.qadev.service.cynthia.util.ArrayUtil;
import com.sogou.qadev.service.cynthia.bean.UUID;
import com.sogou.qadev.service.cynthia.bean.Template;
import com.sogou.qadev.service.cynthia.bean.Flow;
import com.sogou.qadev.service.cynthia.bean.JSTree;
import com.sogou.qadev.service.cynthia.bean.Role;
import com.sogou.qadev.service.cynthia.bean.Action;
import com.sogou.qadev.service.cynthia.bean.Filter;
import com.sogou.qadev.service.cynthia.bean.Key;
import com.sogou.qadev.service.cynthia.factory.DataAccessFactory;
import com.sogou.qadev.service.cynthia.service.DataAccessSession;
import java.util.*;
import org.w3c.dom.*;
import javax.xml.parsers.*;

public class _initfilterdatas__jsp extends com.caucho.jsp.JavaPage
{
  private static final java.util.HashMap<String,java.lang.reflect.Method> _jsp_functionMap = new java.util.HashMap<String,java.lang.reflect.Method>();
  private boolean _caucho_isDead;
  
  public void
  _jspService(javax.servlet.http.HttpServletRequest request,
              javax.servlet.http.HttpServletResponse response)
    throws java.io.IOException, javax.servlet.ServletException
  {
    javax.servlet.http.HttpSession session = request.getSession(true);
    com.caucho.server.webapp.WebApp _jsp_application = _caucho_getApplication();
    javax.servlet.ServletContext application = _jsp_application;
    com.caucho.jsp.PageContextImpl pageContext = _jsp_application.getJspApplicationContext().allocatePageContext(this, _jsp_application, request, response, null, session, 8192, true, false);
    javax.servlet.jsp.PageContext _jsp_parentContext = pageContext;
    javax.servlet.jsp.JspWriter out = pageContext.getOut();
    final javax.el.ELContext _jsp_env = pageContext.getELContext();
    javax.servlet.ServletConfig config = getServletConfig();
    javax.servlet.Servlet page = this;
    response.setContentType("text/xml; charset=UTF-8");
    request.setCharacterEncoding("UTF-8");
    try {
      out.write(_jsp_string0, 0, _jsp_string0.length);
      
	response.setHeader("Cache-Control","no-cache"); //Forces caches to obtain a new copy of the page from the origin server
	response.setHeader("Cache-Control","no-store"); //Directs caches not to store the page under any circumstance
	response.setDateHeader("Expires", 0); //Causes the proxy cache to see the page as "stale"
	response.setHeader("Pragma","no-cache"); //HTTP 1.0 backward compatibility
	
	out.clear();
	
	Key key = (Key)session.getAttribute("key");
	Long keyId = (Long)session.getAttribute("kid");
	
	if(keyId == null || keyId <= 0 || key == null){
		response.sendRedirect(ConfigUtil.getCynthiaWebRoot());
		return;
	}
	
	List<UUID> filterIdList = new ArrayList<UUID>();
	
	DataAccessSession das = DataAccessFactory.getInstance().createDataAccessSession(key.getUsername(), keyId);
	int rootId = 6;
	List<JSTree> rootChildren = das.queryChilderNodes(rootId, key.getUsername());
	List<String> allFolderFilters = das.queryAllFolderFilters(key.getUsername());
	Filter[] userFocusFilters = das.queryFocusFilters(key.getUsername());
	List<String> defaultFilters = das.queryDefaultFilters(key.getUsername());
	
	List<Filter> folderFilters = new ArrayList<Filter>();
	UUID sysFilterId = DataAccessFactory.getInstance().createUUID("119695");
	UUID sysFilterId1 = DataAccessFactory.getInstance().createUUID("119891");
	UUID sysFilterId2 = DataAccessFactory.getInstance().createUUID("119892");
	UUID sysFilterId3 = DataAccessFactory.getInstance().createUUID("119893");
	
	filterIdList.add(sysFilterId);
	filterIdList.add(sysFilterId1);
	filterIdList.add(sysFilterId2);
	filterIdList.add(sysFilterId3);
	
	for(String filterIdStr : defaultFilters)
	{
		for(Filter filter : userFocusFilters)
		{
			if(filter.getId().toString().equals(filterIdStr))
			{
				folderFilters.add(filter);
				break;
			}
		}
	}
	
	for(Filter filter : userFocusFilters)
	{
		filterIdList.add(filter.getId());
		if(!allFolderFilters.contains(filter.getId().toString())&&!defaultFilters.contains(filter.getId().toString()))
		{
			folderFilters.add(filter);
		}
	}
	
	String resultXml = das.getNewTaskIdsByFilterAndUser(filterIdList.toArray(new UUID[filterIdList.size()]), key.getUsername());

	Document filterXml = XMLUtil.string2Document(resultXml,"UTF-8");
	List<Node> filtersNode = XMLUtil.getNodes(filterXml,"filters/filter");
	Map<String,String> filterDatas = new HashMap<String,String>();
	for(Node node : filtersNode)
	{
		//\u53ea\u663e\u793a\u603b\u6570
		String tempString = "("+XMLUtil.getAttribute(node,"totalAccount")+")";
		filterDatas.put(XMLUtil.getAttribute(node,"id"),tempString);
	}

	StringBuffer xmlb = new StringBuffer();
	xmlb.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
	xmlb.append("<root>");
	xmlb.append("<filters>");
	
	Map<String,String> filterIdNameMap = das.queryFilterIdNameMap(key.getUsername());
	
	for(String filterId : filterDatas.keySet()){
		if(filterIdNameMap.get(filterId) == null)
			continue;
	 	xmlb.append("<filter>");
	 	xmlb.append("<id>#").append(filterId).append("</id><datas>");
	 	xmlb.append(filterDatas.get(filterId));
	 	xmlb.append("</datas>");
	 	xmlb.append("<name>").append(XMLUtil.toSafeXMLString(filterIdNameMap.get(filterId))).append("</name>");
	 	xmlb.append("</filter>");
	}
	xmlb.append("</filters>");
	xmlb.append("</root>");
	
	out.println(xmlb.toString());

    } catch (java.lang.Throwable _jsp_e) {
      pageContext.handlePageException(_jsp_e);
    } finally {
      _jsp_application.getJspApplicationContext().freePageContext(pageContext);
    }
  }

  private java.util.ArrayList _caucho_depends = new java.util.ArrayList();

  public java.util.ArrayList _caucho_getDependList()
  {
    return _caucho_depends;
  }

  public void _caucho_addDepend(com.caucho.vfs.PersistentDependency depend)
  {
    super._caucho_addDepend(depend);
    com.caucho.jsp.JavaPage.addDepend(_caucho_depends, depend);
  }

  public boolean _caucho_isModified()
  {
    if (_caucho_isDead)
      return true;
    if (com.caucho.server.util.CauchoSystem.getVersionId() != 7170261747151080670L)
      return true;
    for (int i = _caucho_depends.size() - 1; i >= 0; i--) {
      com.caucho.vfs.Dependency depend;
      depend = (com.caucho.vfs.Dependency) _caucho_depends.get(i);
      if (depend.isModified())
        return true;
    }
    return false;
  }

  public long _caucho_lastModified()
  {
    return 0;
  }

  public java.util.HashMap<String,java.lang.reflect.Method> _caucho_getFunctionMap()
  {
    return _jsp_functionMap;
  }

  public void init(ServletConfig config)
    throws ServletException
  {
    com.caucho.server.webapp.WebApp webApp
      = (com.caucho.server.webapp.WebApp) config.getServletContext();
    super.init(config);
    com.caucho.jsp.TaglibManager manager = webApp.getJspApplicationContext().getTaglibManager();
    com.caucho.jsp.PageContextImpl pageContext = new com.caucho.jsp.PageContextImpl(webApp, this);
  }

  public void destroy()
  {
      _caucho_isDead = true;
      super.destroy();
  }

  public void init(com.caucho.vfs.Path appDir)
    throws javax.servlet.ServletException
  {
    com.caucho.vfs.Path resinHome = com.caucho.server.util.CauchoSystem.getResinHome();
    com.caucho.vfs.MergePath mergePath = new com.caucho.vfs.MergePath();
    mergePath.addMergePath(appDir);
    mergePath.addMergePath(resinHome);
    com.caucho.loader.DynamicClassLoader loader;
    loader = (com.caucho.loader.DynamicClassLoader) getClass().getClassLoader();
    String resourcePath = loader.getResourcePathSpecificFirst();
    mergePath.addClassPath(resourcePath);
    com.caucho.vfs.Depend depend;
    depend = new com.caucho.vfs.Depend(appDir.lookup("filterManage/initFilterDatas.jsp"), -1817796875686032826L, false);
    com.caucho.jsp.JavaPage.addDepend(_caucho_depends, depend);
  }

  private final static char []_jsp_string0;
  static {
    _jsp_string0 = "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n".toCharArray();
  }
}
