/*
 * JSP generated by Resin-3.1.12 (built Mon, 29 Aug 2011 03:22:08 PDT)
 */

package _jsp._frame;
import javax.servlet.*;
import javax.servlet.jsp.*;
import javax.servlet.http.*;
import com.sogou.qadev.service.cynthia.service.ConfigManager;
import com.sogou.qadev.service.cynthia.bean.Pair;
import com.sogou.qadev.service.cynthia.service.DataManager;
import com.sogou.qadev.service.cynthia.bean.DataAccessAction;
import java.util.HashMap;
import com.sogou.qadev.service.cynthia.factory.DataAccessFactory;
import com.sogou.qadev.service.cynthia.service.DataAccessSession;
import com.sogou.qadev.service.cynthia.bean.UUID;
import com.sogou.qadev.service.cynthia.bean.Data;
import com.sogou.qadev.service.cynthia.bean.Template;
import com.sogou.qadev.service.cynthia.bean.Flow;
import com.sogou.qadev.service.cynthia.bean.Action;
import com.sogou.qadev.service.cynthia.bean.Stat;
import com.sogou.qadev.service.cynthia.util.ConfigUtil;
import com.sogou.qadev.service.cynthia.bean.Key;
import java.util.Map;
import java.util.LinkedHashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Arrays;
import com.sogou.qadev.service.cynthia.service.DataAccessSession.ErrorCode;
import com.sogou.qadev.service.cynthia.util.XMLUtil;

public class _get_0modifydatas_0xml__jsp extends com.caucho.jsp.JavaPage
{
  private static final java.util.HashMap<String,java.lang.reflect.Method> _jsp_functionMap = new java.util.HashMap<String,java.lang.reflect.Method>();
  private boolean _caucho_isDead;
  
  public void
  _jspService(javax.servlet.http.HttpServletRequest request,
              javax.servlet.http.HttpServletResponse response)
    throws java.io.IOException, javax.servlet.ServletException
  {
    javax.servlet.http.HttpSession session = request.getSession(true);
    com.caucho.server.webapp.WebApp _jsp_application = _caucho_getApplication();
    javax.servlet.ServletContext application = _jsp_application;
    com.caucho.jsp.PageContextImpl pageContext = _jsp_application.getJspApplicationContext().allocatePageContext(this, _jsp_application, request, response, null, session, 8192, true, false);
    javax.servlet.jsp.PageContext _jsp_parentContext = pageContext;
    javax.servlet.jsp.JspWriter out = pageContext.getOut();
    final javax.el.ELContext _jsp_env = pageContext.getELContext();
    javax.servlet.ServletConfig config = getServletConfig();
    javax.servlet.Servlet page = this;
    response.setContentType("text/xml; charset=UTF-8");
    request.setCharacterEncoding("UTF-8");
    try {
      out.write(_jsp_string0, 0, _jsp_string0.length);
      
	response.setHeader("Cache-Control","no-cache"); //Forces caches to obtain a new copy of the page from the origin server
	response.setHeader("Cache-Control","no-store"); //Directs caches not to store the page under any circumstance
	response.setDateHeader("Expires", 0); //Causes the proxy cache to see the page as "stale"
	response.setHeader("Pragma","no-cache"); //HTTP 1.0 backward compatibility

	out.clear();
	
	Long keyId = (Long)session.getAttribute("kid");
	Key key = (Key)session.getAttribute("key");
	
	if(keyId == null || keyId <= 0 || key == null){
		response.sendRedirect(ConfigUtil.getCynthiaWebRoot());
		return;
	}
	
	String actionName = request.getParameter("actionName");
	if(actionName == null){
		response.sendRedirect(ConfigUtil.getCynthiaWebRoot());
		return;
	}
	
	if(actionName.startsWith("\u6fc0\u6d3b--")){
		actionName = actionName.split("\\-\\-")[1];
	}
	
	String assignUser = request.getParameter("assignUser");
	String actionDesc = request.getParameter("actionDesc");
	
	StringBuffer resultXml = new StringBuffer();
	resultXml.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
	resultXml.append("<root>");
	resultXml.append("<isError>false</isError>");
	resultXml.append("<results>");
	
	String[] taskIdStrArray = request.getParameterValues("dataId");
	if(taskIdStrArray == null || taskIdStrArray.length == 0){
		response.sendRedirect(ConfigUtil.getCynthiaWebRoot());
		return;
	}
	
	DataAccessSession das = DataAccessFactory.getInstance().createDataAccessSession(key.getUsername(), keyId);
	
	Map<UUID,Template> templateMap = new HashMap<UUID,Template>();
	Map<UUID,Flow> flowMap = new HashMap<UUID,Flow>();
	
	for(String taskIdStr : taskIdStrArray){
		UUID taskId = DataAccessFactory.getInstance().createUUID(taskIdStr);
		Data data = das.queryData(taskId);
		
		if(data == null){
			continue;
		}
		
		if(templateMap.get(data.getTemplateId()) == null){
			Template template = das.queryTemplate(data.getTemplateId());
			if(template != null)
				templateMap.put(template.getId(), template);
		}
			
		Template template = templateMap.get(data.getTemplateId());
		
		if(template == null){
			continue;
		}
		
		if(flowMap.get(template.getFlowId()) == null){
			Flow flow = das.queryFlow(template.getFlowId());
			if(flow != null)
				flowMap.put(flow.getId(), flow);
		}
			
		Flow flow = flowMap.get(template.getFlowId());
		
		if(flow == null){
			continue;
		}
		
		Stat stat = flow.getStat(data.getStatusId());
		if(stat == null){
			continue;
		}
		
		Action[] statActionArray = flow.queryStatActions(stat.getId());
		
		//\u5224\u65ad\u7528\u6237\u662f\u5426\u5177\u5907\u6267\u884c\u8be5\u52a8\u4f5c\u7684\u6743\u9650
		boolean isAllow = false;

		Action action = null;
		if(!actionName.equals("\u7f16\u8f91")){
			action = flow.getAction(actionName);
			if(action == null){
				resultXml.append(DataManager.getInstance().makeResult(data.getTitle(), stat.getName(), data.getAssignUsername(), false));
				continue;
			}
		}
		
		Stat lastStat = stat;
		String oldAssignUser = data.getAssignUsername();
		
		if(action == null){
			boolean isEditAllow = flow.isEditActionAllow(key.getUsername(), template.getId(), data.getAssignUsername(), data.getActionUser());
			if(!isEditAllow){
				resultXml.append(DataManager.getInstance().makeResult(data.getTitle(), stat.getName(), data.getAssignUsername(), false));
				continue;
			}
			
			if(statActionArray == null || statActionArray.length == 0){
				if(assignUser != null){
					resultXml.append(DataManager.getInstance().makeResult(data.getTitle(), stat.getName(), data.getAssignUsername(), false));
					continue;
				}
			}
			else{
				if(assignUser == null){
					resultXml.append(DataManager.getInstance().makeResult(data.getTitle(), stat.getName(), data.getAssignUsername(), false));
					continue;
				}
				
				String[] assignUserArray = flow.queryNodeStatAssignUsers(template.getId(), stat.getId());
				if(assignUserArray != null){
					Set<String> assignUserSet = new HashSet<String>(Arrays.asList(assignUserArray));
					if(!assignUserSet.contains(assignUser)){
						resultXml.append(DataManager.getInstance().makeResult(data.getTitle(), stat.getName(), data.getAssignUsername(), false));
						continue;
					}
				}
			}
		}else{
			//\u6279\u91cf\u5173\u95ed\u7684\u60c5\u51b5
			Action[] endActions = flow.getEndActions();
			Stat[] endStats = flow.getEndStats();
			
			boolean batchClose = false;
			boolean isEndStat = false;
			if(endStats != null&&endStats.length>0){
				for(Stat endStat : endStats){
					if(data.getStatusId()!=null&&(data.getStatusId().equals(endStat.getId()))){
						isEndStat = true;
						break;
					}
				}
			}
			if(!isEndStat&&endActions!=null){
				boolean isEditAllow = flow.isEditActionAllow(key.getUsername(), template.getId(), data.getAssignUsername(), data.getActionUser());
				for(Action endAction : endActions){
					if(isEditAllow&&action.getId().equals(endAction.getId())){
						isAllow = true;
						batchClose = true;
						break;						
					}
				}
			}
			//\u6279\u91cf\u5173\u95ed\u7ed3\u675f
			
			
			if(statActionArray == null || statActionArray.length == 0){
				Action[] userNodeBeginActionArray = flow.queryUserNodeBeginActions(key.getUsername(), template.getId());
				if(userNodeBeginActionArray != null){
					for(Action userNodeBeginAction : userNodeBeginActionArray){
						if(userNodeBeginAction.getId().equals(action.getId())){
							isAllow = true;
							break;
						}
					}
				}
			}
			else{
				Action[] userNodeStatActionArray = flow.queryUserNodeStatActions(key.getUsername(), template.getId(), stat.getId());
				if(userNodeStatActionArray != null){
					for(Action userNodeStatAction : userNodeStatActionArray){
						if(userNodeStatAction.getId().equals(action.getId())){
							isAllow = true;
							break;
						}
					}
				}
			}
			
			if(!isAllow){
				resultXml.append(DataManager.getInstance().makeResult(data.getTitle(), stat.getName(), data.getAssignUsername(), false));
				continue;
			}
			
			Stat newStat = flow.getStat(action.getEndStatId());
			if(newStat == null){
				resultXml.append(DataManager.getInstance().makeResult(data.getTitle(), stat.getName(), data.getAssignUsername(), false));
				continue;
			}
			
			if(action.getBeginStatId() == null){
				if(statActionArray != null && statActionArray.length > 0){
					resultXml.append(DataManager.getInstance().makeResult(data.getTitle(), stat.getName(), data.getAssignUsername(), false));
					continue;
				}
			}
			else{
				if(!stat.getId().equals(action.getBeginStatId())&&!batchClose){
					resultXml.append(DataManager.getInstance().makeResult(data.getTitle(), stat.getName(), data.getAssignUsername(), false));
					continue;
				}
			}
			
			
			if(!ConfigManager.getProjectInvolved()){
				//\u975e\u9879\u76ee\u7ba1\u7406\u9a8c\u8bc1
				String[] assignUserArray = flow.queryNodeStatAssignUsers(template.getId(), action.getEndStatId());
				if(assignUserArray == null || assignUserArray.length == 0){
					if(assignUser != null){
						resultXml.append(DataManager.getInstance().makeResult(data.getTitle(), stat.getName(), data.getAssignUsername(), false));
						continue;
					}
				}
				else{
					if(assignUser == null&&!batchClose){
						resultXml.append(DataManager.getInstance().makeResult(data.getTitle(), stat.getName(), data.getAssignUsername(), false));
						continue;
					}
					
					Set<String> assignUserSet = new HashSet<String>(Arrays.asList(assignUserArray));
					if(!assignUserSet.contains(assignUser)){
						resultXml.append(DataManager.getInstance().makeResult(data.getTitle(), stat.getName(), data.getAssignUsername(), false));
						continue;
					}
				}
			}
			
			lastStat = newStat;
		}
		
		//\u5907\u4efddata
		data = (Data)data.clone();
		
		Map<String, Pair<Object, Object>> baseValueMap = new LinkedHashMap<String, Pair<Object, Object>>();
		Map<UUID, Pair<Object, Object>> extValueMap = new LinkedHashMap<UUID, Pair<Object, Object>>();
		
		//assignUser
		if(data.getAssignUsername() == null && assignUser != null
		|| data.getAssignUsername() != null && assignUser == null
			|| data.getAssignUsername() != null && assignUser != null && !data.getAssignUsername().equals(assignUser)){
				baseValueMap.put("assignUser", new Pair<Object, Object>(data.getAssignUsername(), assignUser));
		}

		data.setAssignUsername(assignUser);
		
		//statusId
		if(action != null){
			baseValueMap.put("statusId", new Pair<Object, Object>(data.getStatusId(), action.getEndStatId()));
			data.setStatusId(action.getEndStatId());
		}
		
		//logCreateUser
		data.setObject("logCreateUser", key.getUsername());
		
		//logActionId
		if(action != null){
			data.setObject("logActionId", action.getId());
		}
		
		//logActionComment
		data.setObject("logActionComment", actionDesc);
		
		data.setObject("logBaseValueMap", baseValueMap);
		data.setObject("logExtValueMap", extValueMap);
		
		ErrorCode errorCode = das.modifyData(data).getFirst();
		if(errorCode.equals(ErrorCode.success)){
			ErrorCode errorCode1 = das.commitTranscation();
			if(errorCode1.equals(ErrorCode.success)){
				das.updateCache(DataAccessAction.update, data.getId().getValue(),data);
				resultXml.append(DataManager.getInstance().makeResult(data.getTitle(), lastStat.getName(), assignUser, true));
			}else{
				das.rollbackTranscation();
				resultXml.append(DataManager.getInstance().makeResult(data.getTitle(), stat.getName(), oldAssignUser, false));
			}
		}else{
			das.rollbackTranscation();
			resultXml.append(DataManager.getInstance().makeResult(data.getTitle(), stat.getName(), oldAssignUser, false));
		}
	}
	
	resultXml.append("</results>");
	resultXml.append("</root>");
	
	out.println(resultXml.toString());

    } catch (java.lang.Throwable _jsp_e) {
      pageContext.handlePageException(_jsp_e);
    } finally {
      _jsp_application.getJspApplicationContext().freePageContext(pageContext);
    }
  }

  private java.util.ArrayList _caucho_depends = new java.util.ArrayList();

  public java.util.ArrayList _caucho_getDependList()
  {
    return _caucho_depends;
  }

  public void _caucho_addDepend(com.caucho.vfs.PersistentDependency depend)
  {
    super._caucho_addDepend(depend);
    com.caucho.jsp.JavaPage.addDepend(_caucho_depends, depend);
  }

  public boolean _caucho_isModified()
  {
    if (_caucho_isDead)
      return true;
    if (com.caucho.server.util.CauchoSystem.getVersionId() != 7170261747151080670L)
      return true;
    for (int i = _caucho_depends.size() - 1; i >= 0; i--) {
      com.caucho.vfs.Dependency depend;
      depend = (com.caucho.vfs.Dependency) _caucho_depends.get(i);
      if (depend.isModified())
        return true;
    }
    return false;
  }

  public long _caucho_lastModified()
  {
    return 0;
  }

  public java.util.HashMap<String,java.lang.reflect.Method> _caucho_getFunctionMap()
  {
    return _jsp_functionMap;
  }

  public void init(ServletConfig config)
    throws ServletException
  {
    com.caucho.server.webapp.WebApp webApp
      = (com.caucho.server.webapp.WebApp) config.getServletContext();
    super.init(config);
    com.caucho.jsp.TaglibManager manager = webApp.getJspApplicationContext().getTaglibManager();
    com.caucho.jsp.PageContextImpl pageContext = new com.caucho.jsp.PageContextImpl(webApp, this);
  }

  public void destroy()
  {
      _caucho_isDead = true;
      super.destroy();
  }

  public void init(com.caucho.vfs.Path appDir)
    throws javax.servlet.ServletException
  {
    com.caucho.vfs.Path resinHome = com.caucho.server.util.CauchoSystem.getResinHome();
    com.caucho.vfs.MergePath mergePath = new com.caucho.vfs.MergePath();
    mergePath.addMergePath(appDir);
    mergePath.addMergePath(resinHome);
    com.caucho.loader.DynamicClassLoader loader;
    loader = (com.caucho.loader.DynamicClassLoader) getClass().getClassLoader();
    String resourcePath = loader.getResourcePathSpecificFirst();
    mergePath.addClassPath(resourcePath);
    com.caucho.vfs.Depend depend;
    depend = new com.caucho.vfs.Depend(appDir.lookup("frame/get_ModifyDatas_xml.jsp"), -6010877118804971932L, false);
    com.caucho.jsp.JavaPage.addDepend(_caucho_depends, depend);
  }

  private final static char []_jsp_string0;
  static {
    _jsp_string0 = "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n".toCharArray();
  }
}
