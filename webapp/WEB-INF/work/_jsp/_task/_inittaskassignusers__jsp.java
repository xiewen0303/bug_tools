/*
 * JSP generated by Resin-3.1.12 (built Mon, 29 Aug 2011 03:22:08 PDT)
 */

package _jsp._task;
import javax.servlet.*;
import javax.servlet.jsp.*;
import javax.servlet.http.*;
import com.sogou.qadev.service.cynthia.service.ErrorManager.ErrorType;
import com.sogou.qadev.service.cynthia.service.ErrorManager;
import com.sogou.qadev.service.cynthia.util.CynthiaUtil;
import com.sogou.qadev.service.cynthia.bean.Key;
import com.sogou.qadev.service.cynthia.bean.*;
import com.sogou.qadev.service.cynthia.bean.UUID;
import com.sogou.qadev.service.cynthia.bean.Flow;
import com.sogou.qadev.service.cynthia.bean.Field;
import com.sogou.qadev.service.cynthia.bean.Option;
import com.sogou.qadev.service.cynthia.bean.Action;
import com.sogou.qadev.service.cynthia.bean.Role;
import com.sogou.qadev.service.cynthia.service.DataAccessSession;
import com.sogou.qadev.service.cynthia.factory.DataAccessFactory;
import com.sogou.qadev.service.cynthia.util.ConfigUtil;
import java.util.*;
import com.sogou.qadev.service.cynthia.bean.Pair;
import com.sogou.qadev.service.cynthia.util.XMLUtil;

public class _inittaskassignusers__jsp extends com.caucho.jsp.JavaPage
{
  private static final java.util.HashMap<String,java.lang.reflect.Method> _jsp_functionMap = new java.util.HashMap<String,java.lang.reflect.Method>();
  private boolean _caucho_isDead;

  
  static DataAccessFactory daf = DataAccessFactory.getInstance();

  
  public void
  _jspService(javax.servlet.http.HttpServletRequest request,
              javax.servlet.http.HttpServletResponse response)
    throws java.io.IOException, javax.servlet.ServletException
  {
    javax.servlet.http.HttpSession session = request.getSession(true);
    com.caucho.server.webapp.WebApp _jsp_application = _caucho_getApplication();
    javax.servlet.ServletContext application = _jsp_application;
    com.caucho.jsp.PageContextImpl pageContext = _jsp_application.getJspApplicationContext().allocatePageContext(this, _jsp_application, request, response, null, session, 8192, true, false);
    javax.servlet.jsp.PageContext _jsp_parentContext = pageContext;
    javax.servlet.jsp.JspWriter out = pageContext.getOut();
    final javax.el.ELContext _jsp_env = pageContext.getELContext();
    javax.servlet.ServletConfig config = getServletConfig();
    javax.servlet.Servlet page = this;
    response.setContentType("text/xml; charset=UTF-8");
    request.setCharacterEncoding("UTF-8");
    try {
      out.write(_jsp_string0, 0, _jsp_string0.length);
      
	response.setHeader("Cache-Control","no-cache"); //Forces caches to obtain a new copy of the page from the origin server
	response.setHeader("Cache-Control","no-store"); //Directs caches not to store the page under any circumstance
	response.setDateHeader("Expires", 0); //Causes the proxy cache to see the page as "stale"
	response.setHeader("Pragma","no-cache"); //HTTP 1.0 backward compatibility

	out.clear();

	Long keyId = (Long)session.getAttribute("kid");
	Key key = (Key)session.getAttribute("key");

	if(keyId == null || keyId <= 0 || key == null){
		response.sendRedirect(ConfigUtil.getCynthiaWebRoot());
		return;
	}

	DataAccessSession das = daf.createDataAccessSession(key.getUsername(), keyId);
	
	Data data = null;
	if(request.getParameter("taskId") != null){
		UUID taskId = daf.createUUID(request.getParameter("taskId"));
		data = das.queryData(taskId);
		if(data == null){
			out.println(ErrorManager.getErrorXml(ErrorType.data_not_found_inDb));
			return;
		}
	}
	
	UUID statId = daf.createUUID(request.getParameter("statId"));
	UUID actionId = daf.createUUID(request.getParameter("actionId"));
	Template template = null;
	if(data == null){
		UUID templateId = daf.createUUID(request.getParameter("templateId"));
		template = das.queryTemplate(templateId);
	}else{
		template = das.queryTemplate(data.getTemplateId());
	}
	
	if(template == null){
		out.println(ErrorManager.getErrorXml(ErrorType.template_not_found));
		return;
	}
	
	Flow flow = das.queryFlow(template.getFlowId());
	if(flow == null){
		out.println(ErrorManager.getErrorXml(ErrorType.flow_not_found));
		return;
	}
	
	StringBuffer xmlb = new StringBuffer(64);
	xmlb.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
	
	xmlb.append("<root>");
	
	xmlb.append("<needUser>");
	Action[] actionArray = flow.queryStatActions(statId);
	if(actionArray == null || actionArray.length == 0){
		xmlb.append(false);
	}else{
		xmlb.append(true);
	}
	xmlb.append("</needUser>");
	
	Set<String> userSet = new LinkedHashSet<String>();
	
	String[] userArray = flow.queryNodeStatAssignUsers(template.getId(), statId);
	
	if(userArray != null && userArray.length > 0){
		userSet.addAll(Arrays.asList(userArray));
	}
	
	if(data != null){
 		// everyone\u53ef\u65b0\u5efa\u7684\u8868\u5355 \u9ed8\u8ba4\u52a0\u4e0a\u521b\u5efa\u4eba\u5458
 		for(Action action : flow.queryBeginActions()){
 			if(flow.isActionEveryoneRole(action.getId())){
 				userSet.add(data.getCreateUsername());
 				break;
 			}
 		}
 	}
	
	if(userSet.size() == 0){
		xmlb.append("<users/>");
	}
	else{
		xmlb.append("<users>");
		
		List<String> firstUsers = new ArrayList<String>();
		
		if(data != null){
			if(data.getAssignUsername() != null && data.getStatusId().toString().equals(statId.toString()))//\u5f53\u524d\u662f\u7f16\u8f91\u52a8\u4f5c
				firstUsers = Arrays.asList(data.getAssignUsername().split(","));
			
// 			if(firstUsers.size() == 0){
// 				for(int i = data.getChangeLogs().length - 1; i >= 0; i--){
// 					if(data.getChangeLogs()[i].getActionId() != null && userSet.contains(data.getChangeLogs()[i].getCreateUser())){
// 						firstUsers.add(data.getChangeLogs()[i].getCreateUser());
// 						break;
// 					}
// 				}
// 			}
		}
		
		if(firstUsers.size() > 1){
			xmlb.append("<assignToMore>true</assignToMore>");
		}
		
		if(firstUsers.size() > 0){
			StringBuffer firstUserRoles = new StringBuffer();
			for(String firstUser : firstUsers){
				Role[] firstUserRoleArray = flow.queryUserNodeRoles(firstUser, template.getId());
				for(Role firstUserRole : firstUserRoleArray){
					if(firstUserRoles.length() > 0){
						firstUserRoles.append(",");
					}
					
					firstUserRoles.append(firstUserRole.getName());
				}
				
				String userAlias = CynthiaUtil.getUserAlias(firstUser);
				xmlb.append("<user" + (userAlias != null ? " alias=\"" + XMLUtil.toSafeXMLString(userAlias) + "\"" : "") + " first=\"true\">").append(firstUser + "[" + firstUserRoles + "]").append("</user>");
			}
		}
		
		for(String user : userSet){
			if(!firstUsers.contains(user)){
				StringBuffer userRoles = new StringBuffer();
				
				Role[] userRoleArray = flow.queryUserNodeRoles(user, template.getId());
				for(Role userRole : userRoleArray){
					if(userRoles.length() > 0){
						userRoles.append(",");
					}
					userRoles.append(userRole.getName());
				}
				
				String userAlias = CynthiaUtil.getUserAlias(user);
				xmlb.append("<user" + (userAlias != null ? " alias=\"" + XMLUtil.toSafeXMLString(userAlias) + "\"" : "") + ">").append(user + "[" + userRoles + "]").append("</user>");
			}
		}
		
		xmlb.append("</users>");
	}
	
	xmlb.append("</root>");
	
	out.println(xmlb);

      out.write(_jsp_string1, 0, _jsp_string1.length);
    } catch (java.lang.Throwable _jsp_e) {
      pageContext.handlePageException(_jsp_e);
    } finally {
      _jsp_application.getJspApplicationContext().freePageContext(pageContext);
    }
  }

  private java.util.ArrayList _caucho_depends = new java.util.ArrayList();

  public java.util.ArrayList _caucho_getDependList()
  {
    return _caucho_depends;
  }

  public void _caucho_addDepend(com.caucho.vfs.PersistentDependency depend)
  {
    super._caucho_addDepend(depend);
    com.caucho.jsp.JavaPage.addDepend(_caucho_depends, depend);
  }

  public boolean _caucho_isModified()
  {
    if (_caucho_isDead)
      return true;
    if (com.caucho.server.util.CauchoSystem.getVersionId() != 7170261747151080670L)
      return true;
    for (int i = _caucho_depends.size() - 1; i >= 0; i--) {
      com.caucho.vfs.Dependency depend;
      depend = (com.caucho.vfs.Dependency) _caucho_depends.get(i);
      if (depend.isModified())
        return true;
    }
    return false;
  }

  public long _caucho_lastModified()
  {
    return 0;
  }

  public java.util.HashMap<String,java.lang.reflect.Method> _caucho_getFunctionMap()
  {
    return _jsp_functionMap;
  }

  public void init(ServletConfig config)
    throws ServletException
  {
    com.caucho.server.webapp.WebApp webApp
      = (com.caucho.server.webapp.WebApp) config.getServletContext();
    super.init(config);
    com.caucho.jsp.TaglibManager manager = webApp.getJspApplicationContext().getTaglibManager();
    com.caucho.jsp.PageContextImpl pageContext = new com.caucho.jsp.PageContextImpl(webApp, this);
  }

  public void destroy()
  {
      _caucho_isDead = true;
      super.destroy();
  }

  public void init(com.caucho.vfs.Path appDir)
    throws javax.servlet.ServletException
  {
    com.caucho.vfs.Path resinHome = com.caucho.server.util.CauchoSystem.getResinHome();
    com.caucho.vfs.MergePath mergePath = new com.caucho.vfs.MergePath();
    mergePath.addMergePath(appDir);
    mergePath.addMergePath(resinHome);
    com.caucho.loader.DynamicClassLoader loader;
    loader = (com.caucho.loader.DynamicClassLoader) getClass().getClassLoader();
    String resourcePath = loader.getResourcePathSpecificFirst();
    mergePath.addClassPath(resourcePath);
    com.caucho.vfs.Depend depend;
    depend = new com.caucho.vfs.Depend(appDir.lookup("task/initTaskAssignUsers.jsp"), -5922299434374147457L, false);
    com.caucho.jsp.JavaPage.addDepend(_caucho_depends, depend);
  }

  private final static char []_jsp_string0;
  private final static char []_jsp_string1;
  static {
    _jsp_string0 = "\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n".toCharArray();
    _jsp_string1 = "\r\n".toCharArray();
  }
}
